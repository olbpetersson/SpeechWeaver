<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SystemWeaver.Common</name>
    </assembly>
    <members>
        <member name="T:SystemWeaver.Common.ConnectionEvents">
            <summary>
            Class which implements the SystemWeaver IswEvent listener interface to expose the events as C# events.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswEvent">
            <summary>
            Interface to implement if you want to listen to all SystemWeaver events.
            </summary>
            <remarks>
            In general you should not implement this class yourself. The SystemWeaver API provides SystemWeaverAPI.SWConnection.EventManager for easy access to SystemWeaver events as C# events.
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswEvents">
            <summary>
            The SystemWeaver events as C# events.
            </summary>
        </member>
        <member name="E:SystemWeaver.Common.IswEvents.Obj_AddFile">
            <summary>
              Is triggered when you add a file to an item or issue, for example through <see cref="M:SystemWeaver.Common.IswObj.AddFileByName(System.String,SystemWeaver.Common.IswFileRevision)"/>.
              You only get an event if the obj has been read in into the cache.
            </summary> 
        </member>
        <member name="E:SystemWeaver.Common.IswEvents.Obj_RemoveFile">
            <summary>
              Is triggered when you remove a file from an item or issue, for example through <see cref="M:SystemWeaver.Common.IswObj.RemoveFile(SystemWeaver.Common.IswFileRevision)"/>.
              You only get an event if the obj has been read in into the cache.
            </summary>
        </member>
        <member name="E:SystemWeaver.Common.IswEvents.ProjectDefinition_AddView">
            <summary>
              Is triggered when you add a view to a project definition.
              You only get an event if the project has been read in into the cache.
            </summary> 
        </member>
        <member name="E:SystemWeaver.Common.IswEvents.ProjectDefinition_AddReport">
            <summary>
              Is triggered when you add a report to a project definition.
              You only get an event if the project has been read in into the cache.
            </summary> 
        </member>
        <member name="E:SystemWeaver.Common.IswEvents.ProjectDefinition_AddIssueType">
            <summary>
              Is triggered when you add an issue type to a project definition.
              You only get an event if the project has been read in into the cache.
            </summary> 
        </member>
        <member name="E:SystemWeaver.Common.IswEvents.ProjectDefinition_AddWorkflow">
            <summary>
              Is triggered when you add a workflow to a project definition.
              You only get an event if the project has been read in into the cache.
            </summary> 
        </member>
        <member name="E:SystemWeaver.Common.IswEvents.Workflow_AddStatus">
            <summary>
              Is triggered when you add a workflow status to a workflow.
              You only get an event if the workflow has been read in into the cache.
            </summary> 
        </member>
        <member name="E:SystemWeaver.Common.IswEvents.Workflow_AddTransition">
            <summary>
              Is triggered when you add a transition to a workflow.
              You only get an event if the workflow has been read in into the cache.
            </summary> 
        </member>
        <member name="T:SystemWeaver.Common.Internal.SWBranchInfo">
            <summary>
             Contains utility functions for dealing with version numbers.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.Internal.SWBranchInfo.GetBranchNo(System.String)">
            <summary>
               Parses an item version number and returns the first branch letter as an integer.
            </summary>
            <param name="AVersionNumber"></param>
            <remarks>
            	<para>"1a1" returns 1</para>
            	<para>"1b1" returns 2</para>
            	<para>"1z1" returns 26</para>
            	<para>"1aa1" returns 27</para>
            	<para>"1ba1" returns 53<br/></para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.Internal.SWBranchInfo.SplitVersionNumber(System.String,System.String@,System.Int32@)">
            <summary>
              Splits the version number into 2 parts. The last version number and the part before.
            </summary>
            <param name="AVersionNumber"></param>
            <param name="ABase">Returns everything befor the last version integer</param>
            <param name="ANo">Returns the last version integer</param>
            <remarks>
            	<para>"1a1" returns base="1a", no=1<br/></para>
            	<para>"2a1b12" returns base="2a1b" no=12</para>
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.Internal.SWCompression">
            <summary>
            Contains utility function for standardizing working with zlib.
            </summary>
            <remarks>Please use these wrappers to compress or decompress. What external library we use may change so please do not reference it.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.Internal.SWCompression.ZCompressXMLToBytes(System.Xml.Linq.XDocument)">
            <summary>
            Convenience function to compress an xml document.
            </summary>
            <param name="ADocument">An XML document</param>
            <returns>Byte array of compressed data</returns>
        </member>
        <member name="M:SystemWeaver.Common.Internal.SWCompression.ZDecompressToString(System.Byte[])">
            <summary>
            Decompress a byte-array back to a string.
            </summary>
            <param name="ABytes">Byte array of compressed data</param>
            <returns>A string</returns>
        </member>
        <member name="M:SystemWeaver.Common.Internal.SWCompression.ZCompressStringToBytes(System.String)">
            <summary>
            Compress a string to bytes.
            </summary>
            <param name="AString">A string</param>
            <returns>Byte array of compressed data</returns>
        </member>
        <member name="M:SystemWeaver.Common.Internal.SWCompression.ZCompressBytes(System.Byte[])">
            <summary>
               Compress a byte-array to a byte-array
            </summary>
            <param name="ABytes">Uncompressed data</param>
            <returns>Byte array of compressed data</returns>
        </member>
        <member name="M:SystemWeaver.Common.Internal.SWCompression.ZDecompressBytes(System.Byte[])">
            <summary>
              Decompress a byte-array to a byte-array
            </summary>
            <param name="compressedData">Byte array of compressed data</param>
            <returns>The uncompressed data</returns>
        </member>
        <member name="T:SystemWeaver.Common.SWHandleUtility">
            <summary>
            Utility class for dealing with SystemWeaver handles.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWHandleUtility.GetID(System.Int64)">
            <summary>
            [internal, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWHandleUtility.MakeNilHandle(SystemWeaver.Common.Internal.Tswot)">
            <summary>
            [internal, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWHandleUtility.HandleToString(System.Int64)">
            <summary>
             String representation of a SystemWeaver handle. (Use IswOject.HandleStr instead where applicable.)
            </summary>
            <param name="handle">A SystemWeaver handle</param>
            <returns>A String representation of handle</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWHandleUtility.ToHandle(System.String)">
            <summary>
              Converts from the string representation of a SystemWeaver handle to the Int64 representation.
            </summary>
            <param name="handleStr">The handle as a string (lowercase x followed by 16 hexadecimal digits)</param>
            <exception cref="T:System.ArgumentException">If handleStr format is invalid</exception>
            <returns>The handle as an Int64</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWHandleUtility.HandleIsNil(System.Int64)">
            <summary>
            Determines if a SystemWeaver handle represent a nil object.
            </summary>
            <param name="handle">The handle to check</param>
            <returns>True if the handle is nil.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWHandleUtility.Swot(System.Int64)">
            <summary>
            [internal, do not use]
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.Internal.SWNilHandle">
            <summary>
            Collection of constants for nil handles of different SystemWeaver objects
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.Internal.TRelationshipEditorType">
            <summary>
              Enumeration of different editor types.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.Internal.TRelationshipEditorType.Popup">
            <summary>The editor should be a popup window</summary>
        </member>
        <member name="F:SystemWeaver.Common.Internal.TRelationshipEditorType.DropDown">
            <summary>The editor should be a drowdown</summary>
        </member>
        <member name="T:SystemWeaver.Common.Internal.TRelationshipConfig">
            <summary>
            Help class for workin with the relationship config xml.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.Internal.TRelationshipConfig.#ctor(SystemWeaver.Common.IswIssueRefType)">
            <summary>
              Initializes a new instance of the TRelationshipConfig class. 
            </summary>
            <param name="issueRefType">A issue ref type</param>
        </member>
        <member name="M:SystemWeaver.Common.Internal.TRelationshipConfig.#ctor(SystemWeaver.Common.IswBroker,System.String)">
            <summary>
              Initializes a new instance of the TRelationshipConfig class. 
            </summary>
            <param name="broker">The broker.</param>
            <param name="AXML">The relationships config XML</param>
        </member>
        <member name="M:SystemWeaver.Common.Internal.TRelationshipConfig.GetPossibleItems(SystemWeaver.Common.IswIssue)">
            <summary>
              Returns the list of items to choose from, given the current issue, and the project setup.
            </summary>
            <param name="AIssue">The issue on which to set a relationship</param>
            <returns>Possible items</returns>
        </member>
        <member name="P:SystemWeaver.Common.Internal.TRelationshipConfig.XML">
            <summary>
              The relationship config XML.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.Internal.TRelationshipConfig.HasConstraint">
            <summary>
              Is there a constraint. If so use GetPossibleItems should be used.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.Internal.TRelationshipConfig.EditorType">
            <summary>
              Type of editor: popup/dropdown.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.Internal.TRelationshipConfig.EditorWidth">
            <summary>
              Preferred widht of the editor in pixels.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.Internal.TRelationshipConfig.EditorShowVersion">
            <summary>
              Should the version-number be included with the name when showing item-names.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.Internal.Tswot">
            <summary>
              [Do not use] Internal use only. Use the is operator on the SystemWeaver interface instead.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWAttributes">
            <summary>
            This class contains the functions for converting string/xml/text-attributes to byte arrays and back. See <see cref="T:SystemWeaver.Common.SWAttributeDataType"/> for how strings are stored. 
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWAttributes.AttributeDataToString(System.Byte[],SystemWeaver.Common.IswAttributeType)">
            <summary>
            Converts a byte array as stored in a SystemWeaver back to a string.
            </summary>
            <param name="AData">The byte array to convert back to string.</param>
            <param name="AAttributeType">The attribute-type to which the string belongs.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAttributes.StringToAttributeData(System.String,SystemWeaver.Common.IswAttributeType)">
            <summary>
            Converts a string to byte array as stored in SystemWeaver attributes. This depends on the DataType so we have to supply the AttributeType.
            </summary>
            <param name="AString">The string to convert.</param>
            <param name="AAttributeType">The attribute type.</param>
            <returns>The string as byte array</returns>
        </member>
        <member name="T:SystemWeaver.Common.SWComparer">
            <summary>
              Utility class containing useful functions comparing SystemWeaver objects in different ways.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWComparer.IsNull(SystemWeaver.Common.IswObject)">
            <summary>
              Determines if the SystemWeaver object is null or is a nil object.
            </summary>
            <param name="o1">SystemWeaver object to check</param>
            <returns>True if the SystemWeaver object is null or is a nil object.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWComparer.AreEqualOrBothNull(SystemWeaver.Common.IswObject,SystemWeaver.Common.IswObject)">
            <summary>
              Determines if two SystemWeaver interfaces represents the same object, also considering both null as beeing equal.
            </summary>
            <param name="o1">The first interface</param>
            <param name="o2">The second interface</param>
            <returns>True if the interfaces represents the same SystemWeaver object.</returns>
            <seealso cref="M:SystemWeaver.Common.SWComparer.AreEqual"></seealso>
        </member>
        <member name="M:SystemWeaver.Common.SWComparer.AreEqual(SystemWeaver.Common.IswObject,SystemWeaver.Common.IswObject)">
            <summary>
              Determines if two SystemWeaver interfaces represents the same object, returning false if any interface is null.
            </summary>
            <param name="o1">The first interface</param>
            <param name="o2">The second interface</param>
            <returns>True if the interfaces represents the same SystemWeaver object.</returns>
            <seealso cref="M:SystemWeaver.Common.SWComparer.AreEqualOrBothNull"></seealso>
        </member>
        <member name="M:SystemWeaver.Common.SWComparer.AreEqual(SystemWeaver.Common.IswAttribute,SystemWeaver.Common.IswAttribute)">
            <summary>
              Determines if two SystemWeaver attributes represents the same attrbiute, returning false if any attribute is null.
            </summary>
            <param name="a1">The first attribute</param>
            <param name="a2">The second attribute</param>
            <returns>True if the attributes represents the same SystemWeaver attribute.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWComparer.AreVEqual(SystemWeaver.Common.IswItem,SystemWeaver.Common.IswItem)">
            <summary>
              Determines if two SystemWeaver item interfaces represents the same item, with different version of same item beeing equal. 
            </summary>
            <param name="o1">The first item</param>
            <param name="o2">The second item</param>
            <returns>True if the two items are the same, possibly differnt version of each other.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWComparer.BytesEqual(System.Byte[],System.Byte[])">
            <summary>
              Utility function compareing two byte arrays.
            </summary>
            <param name="b1">The first byte array.</param>
            <param name="b2">The second byte array.</param>
            <returns>True if two byte arrays are the same, byte for byte</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswDescription">
            <summary>
              Utility class for working with descriptions which contains a reference table and the actual text represented as compressed RVF.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswDescription.HasNilLinks">
            <summary>
              Returns if the object reference table contains nil links
            </summary>
            <returns>True if nil links exists</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswDescription.Data">
            <summary>
              The complete raw data representing the description
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswDescription.Text">
            <summary>
              The text data as compressed RVF.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWPartTypeKind">
            <summary>
            Types of part-types.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWPartTypeKind.Custom">
            <summary>
            Used for special part-types that you don't want the explorer to 
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWPartTypeKind.Simple">
            <summary>
            Standard part-type, no node-creation.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWPartTypeKind.Structural">
            <summary>
            Structural part-type with automatic node-creation.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWPartTypeKind.Associative">
            <summary>
            [Obsolete]
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWMultiplicity">
            <summary>
              Class containing the SystemWever multiplicity string constants.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWMultiplicity.List">
            <summary>
            Represents multiplicity list.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWMultiplicity.Single">
            <summary>
            Represents multiplicity single.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWAttributeDataType">
            <summary>This enumeration represents the datatype of a SystemWeaver attribute-type.</summary>
            <remarks>TODO SWAttributeDataType</remarks>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.Custom">
            <summary>
            	<para>Used to represent a custom attribute.</para>
            	<para>Custom attributes should be used when you need new attribute-values not covered by the standard built-in editors.</para>
            	<para>In general zlib compressed UTF-16 xml are used for structured data, but depending on circumstances suitable binary formats may be used.</para>
            </summary>
            <remarks>Custom attributes should be used when you need your own attributes which does not use the built in standard editors. In general zlib zipped xml are preferred for structured data, 
            but binary data storage formats </remarks>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.Boolean">
            <summary>
            	<para>Used to represent a boolean value.</para>
            	<para>The values are stored as strings, 'True' or 'False'.</para>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.Integer">
            <summary>
            	<para>Used to represent integer values.</para>
            	<para>Values are stored in string format as decimal numbers.</para>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.Float">
            <summary>
            	<para>Used to represent floating point values.</para>
            	<para>Values are stored in string format as decimal numbers with decimal point. Example:</para>
            	<code>
                   734147356.496
            </code>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.String">
            <summary>
            	<para>Used to represent single line strings. The strings are encoded into bytes by Encoding.Unicode.GetString(AData).</para>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.Enumeration">
            <summary>
            	<para>Represents an enumeration.</para>
            	<para>The values as stored as strings.</para>
            	<para>The <see cref="P:SystemWeaver.Common.IswAttributeType.Range"/> contains an xml which defines the valid enumeration values and associated colors. To get just the enumeration values you can
            use <see cref="P:SystemWeaver.Common.IswAttributeType.RangeArray"/>.</para>
            	<para></para>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.XML">
            <summary>
            	<para>[Mainly for future use] Used when storing xml documents.</para>
            	<para>There is yet no real support for this attribute datatype.</para>
            	<para>Values are stored as a zlib compressed UTF-16 string, i.e. through ZCompressBytes(Encoding.Unicode.GetBytes(AString)) where ZCompressBytes is zlib compression. </para>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.Date">
            <summary>
            	<para>Used to represent a date and time value.</para>
            	<para>This attribute is stored as a string of the format: 'YYYY-MM-DD hh:mm:ss' and the application is responsible for converting this to an internal date and
            time representation and then use the settings from the operation system to display the date in a format acceptable to the user.</para>
            	<para></para>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.Text">
            <summary>
            	<para>Used to represent longer texts.</para>
            	<para>Values are stored as a zlib compressed UTF-16 string, i.e. through ZCompressBytes(Encoding.Unicode.GetBytes(AString)) where ZCompressBytes is zlib compression.</para>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.RVF">
            <summary>
            	<para>Used for formatted text.</para>
            	<para>The values are stored in the same format as the description texts.</para>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.User">
            <summary>
            	<para>Used to have an attribute referencing a SystemWeaver user.</para>
            	<para>The attribute values are not stored in the value property of IswAttribute, but are managed through the interface <see cref="T:SystemWeaver.Common.IswUserAttribute"/>.</para>
            	<para></para>
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataType.ExtRef">
            <summary>
            	<para>Used to represent values given by url's.</para>
            	<para>The value is stored as zlib compressed xml. For datadimension single the format is:</para>
            	<code>
                  &lt;ExtRef uri="..."/&gt;
                    
            </code>
            	<para>and for datadimension array the format is</para>
            	<code>
                    &lt;ExtRefs&gt;
                      &lt;ExtRef uri="..."/&gt;
                      &lt;ExtRef uri="..."/&gt;
                    &lt;/ExtRefs&gt;
                    
            </code>
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWItemVersionBranching">
            <summary>
            This enumeration represents the different types of ways an item can be in a branch or in the trunk.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWItemVersionBranching.Trunk">
            <summary>
            The item belongs to the trunk. There is only 1 trunk.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWItemVersionBranching.Branch">
            <summary>
            This item version is an immediate branch of another item.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWItemVersionBranching.ImplicitBranch">
            <summary>
            This item itself is not a direct branch, but there is a previous version somewhere up which is a branch. I.e. the item version is not in trunk.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWAttributeDataDimension">
            <summary>
            This enumeration specifies the attribute data dimension.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataDimension.Single">
            <summary>Attribute value should be exactly one value of specified data-type.</summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataDimension.Array">
            <summary>Attribute value should consist of an array of values. One value may occur several times.</summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAttributeDataDimension.Set">
            <summary>Attribute value should consist of set of values. Each value should appear at most once.</summary>
        </member>
        <member name="T:SystemWeaver.Common.SWWorkflowStatusType">
            <summary>
            This enumeration specifies the type of a workflow status, open or closed.
            </summary>
            <remarks>
            The status type affects when issues are shown in different views. Since you generally don't delete issues, the longer a project runs, the more issues you have, and there is 
            a chance that you loose track of what to do since you only see things you have done.
            By setting an issue to a status with type Closed you indicate that you are done with this issue and don't want to see it any more.
            </remarks>
        </member>
        <member name="F:SystemWeaver.Common.SWWorkflowStatusType.Open">
            <summary>
            The issue should be visible.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWWorkflowStatusType.Closed">
            <summary>
            You are finished with this issue and don't want to see it anymore.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWIterationStatus">
            <summary>
            This enumeration specifies the status of an iteration, active or closed.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWIterationStatus.Active">
            <summary>
            The iteration is active.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWIterationStatus.Closed">
            <summary>
            The iteration is closed. Is hidden in views since it is over and done with.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWWorkflowTransitionType">
            <summary>
            This enumeration represents the different types of workflow transitions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWWorkflowTransitionType.StatusChange">
            <summary>
            Represents setting the status of an issue.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWWorkflowTransitionType.Assign">
            <summary>
            Represents changing the assigned to property of an issue.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWWorkflowTransitionType.AddNote">
            <summary>
            Represents adding a note.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWWorkflowTransitionType.NewIssue">
            <summary>
            Represents creating a new issue.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWWorkflowTransitionType.CloseIssue">
            <summary>
            Represents setting the status of an issue to a status of type close.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TTypeMultiplicity">
            <summary>
            This enumeration represents relationship multiplicity, list or single.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.TTypeMultiplicity.List">
            <summary>
            Multiplicity list, i.e. *.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.TTypeMultiplicity.Single">
            <summary>
            Multiplicity single, i.e. 0..1.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWRoleId">
            <summary>
            Utility class with string constants for SystemWeaver roles.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWNoteType">
            <summary>
            Collection of SIDs for SystemWeaver notes.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWItemStatus">
            <summary>
            This enumeration represents the different item statuses. The Statuses represents the workflow between versions of an item.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWItemStatus.Work">
            <summary>
            Status work, an item can be edited by those with write permissions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWItemStatus.Frozen">
            <summary>
            Frozen, i.e. ReadOnly. The item can not be edited but the status can still be changed back to Work for editing.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWItemStatus.Released">
            <summary>
            The item can no longer be changed, but other items that this item references may still be changed.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWItemStatus.CSReleased">
            <summary>
            The item can no longer be changed, and all items referenced by this item (and the items referenced by them, and so on) can no longer be changed.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWItemStatus.CheckedOut">
            <summary>
            The item has been checked out by one user and can only be edited by that user.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWItemStatusExtensions">
            <summary>
            Extension methods for the SWItemStatus enumeration.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWItemStatusExtensions.DisplayString(SystemWeaver.Common.SWItemStatus)">
            <summary>
            Returns an item status as a string.
            </summary>
            <param name="status">This status</param>
            <returns>The string representation of an item status.</returns>
        </member>
        <member name="T:SystemWeaver.Common.SWPartType">
            <summary>
            Collection of SIDs for SystemWeaver part-types.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWDefs">
            <summary>
              Collection of SystemWeaver constants and SIDs.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWSafeException">
            <summary>
            Use this exception to raise an exception which you want to present to the user as a nice error message instead of as an angry exception message.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWSafeException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWSafeException.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWSafeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWSafeException.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The exception error message</param>
        </member>
        <member name="T:SystemWeaver.Common.SWClientServerVersionIncompatibility">
            <summary>
            Base exception class for exceptions relating to server/client compatibility
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWClientServerVersionIncompatibility.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWClientServerVersionIncompatibility.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWClientServerVersionIncompatibility.#ctor(System.String)">
            <summary>
            Message constuctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWClientServerVersionIncompatibility.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWClientServerVersionIncompatibility.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization of Exception
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SystemWeaver.Common.SWClientServerVersionIncompatibility.ServerVersionNumber">
            <summary>
            The version number of the server API.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.SWClientServerVersionIncompatibility.ClientVersionNumber">
            <summary>
            The version number of the client API.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWMajorVersionOldServerException">
            <summary>
            This exception is thrown when the client is newer than the server with respect to major version number.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWMajorVersionOldServerException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWMajorVersionOldServerException.#ctor(System.String)">
            <summary>
            Message constuctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWMajorVersionOldServerException.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWMajorVersionOldServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SystemWeaver.Common.SWMinorVersionOldServerException">
            <summary>
            This exception is thrown when the client is newer than the server with respect to minor version number.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWMinorVersionOldServerException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWMinorVersionOldServerException.#ctor(System.String)">
            <summary>
            Message constuctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWMinorVersionOldServerException.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWMinorVersionOldServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SystemWeaver.Common.SWMajorVersionOldClientException">
            <summary>
            This exception is thrown when the client is older than the server with respect to major version number. 
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWMajorVersionOldClientException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWMajorVersionOldClientException.#ctor(System.String)">
            <summary>
            message constuctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWMajorVersionOldClientException.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWMajorVersionOldClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SystemWeaver.Common.SWException">
            <summary>
            Base class for exceptions generated by the SystemWeaver API. Also used for exceptions generated by SystemWeaver applications like the swExplorer.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWException.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWException.#ctor(System.String)">
            <summary>
            The basic constructor.
            </summary>
            <param name="message">The exception error message.</param>
        </member>
        <member name="M:SystemWeaver.Common.SWException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization logic
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SystemWeaver.Common.SWException.ExceptionType">
            <summary>
            Type of the Exception
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWInvalidUsernameOrPasswordException">
            <summary>
            Exception representing invalid username or password when logging in to the server.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWInvalidUsernameOrPasswordException.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWInvalidUsernameOrPasswordException.#ctor(System.String)">
            <summary>
            Message constuctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWInvalidUsernameOrPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWInvalidUsernameOrPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWInvalidUsernameOrPasswordException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization logic
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SystemWeaver.Common.SWInvalidUsernameOrPasswordException.ServerName">
            <summary>
            The name of the server where the login failed.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.SWInvalidUsernameOrPasswordException.Username">
            <summary>
            The user login name which failed to login on the server.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWRemoveIsReferencedException">
            <summary>
            Exception representing the error you get when you try to delete a SystemWeaver object which is referenced by other objects and therefore cannot be removed.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWRemoveIsReferencedException.#ctor(System.String)">
            <summary>
            [do not use] The constructor.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWRemoveIsReferencedException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWRemoveIsReferencedException.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWRemoveIsReferencedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SystemWeaver.Common.SWProjectNameAlreadyExistsException">
            <summary>
            Exception representing the error you get when you try to create a new SystemWeaver issue project and a project with that name already exists.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWProjectNameAlreadyExistsException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWProjectNameAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWProjectNameAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWProjectNameAlreadyExistsException.#ctor(System.String)">
            <summary>
            [do not use] The constructor.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWBufferException">
            <summary>
            Exception class for exception with SystemWeaver buffers.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWBufferException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWBufferException.#ctor(System.String,System.Exception)">
            <summary>
            Inner exception constuctor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWBufferException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SystemWeaver.Common.SWBufferException.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="message">The exception error message.</param>
        </member>
        <member name="T:SystemWeaver.Common.IswRefactorings">
            <summary>
            The refactorings.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswRefactorings.ChangePartType(SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswItemType,SystemWeaver.Common.IswItemType)">
            <summary>
            [refactoring, do not use] WARNING, does not update client cache.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswRefactorings.ChangePartMultiplicityToList(SystemWeaver.Common.IswPartType)">
            <summary>
            [refactoring, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswRefactorings.ChangePartTypeKind(SystemWeaver.Common.IswPartType,SystemWeaver.Common.SWPartTypeKind)">
            <summary>
            [refactoring, do not use] WARNING, does not update client cache.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswRefactorings.InsertListItem(SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswItemType,SystemWeaver.Common.IswPartType)">
            <summary>
            [refactoring, do not use] WARNING, does not update client cache.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswRefactorings.ChangeItemType(SystemWeaver.Common.IswItemType,SystemWeaver.Common.IswItemType)">
            <summary>
            [refactoring, do not use] Changes all items of type one type to another. Typically used before removing said item-type.
            WARNING, this refactoring updates the client cache, but with one event per item which changes item-type, which might be very many.
            </summary>
            <param name="oldItemType">The type to convert from,</param>
            <param name="newItemType">The type to convert to.</param>
        </member>
        <member name="T:SystemWeaver.Common.IswBroker">
            <summary>
            Starting class for working with the api. Represents the server you are logged in to.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.Login(System.String,System.String)">
            <summary>
              Login to the SystemWeaver server/database. Raises exception on falied login.
            </summary>
            <param name="loginName">The user login name.</param>
            <param name="password">The user password</param>
            <returns>The user object representing the user you are logged in as</returns>
            <exception cref="T:SystemWeaver.Common.SWInvalidUsernameOrPasswordException">If login failed due to invalid username or password</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.Impersonate(SystemWeaver.Common.IswUser)">
            <summary>
            Temporarily run as another user.
            </summary>
            <remarks>
            Current user need 'system' privileges to do this.
            
            <br/>Doing this has consequences...
            </remarks>
            <param name="user">The user to run as.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.Release(SystemWeaver.Common.IswUser)">
            <summary>
            Stops the last impersonation.
            </summary>
            <remarks>
            Must match the user of the previous Impersonate.
            </remarks>
            <param name="user"></param>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.Logout">
            <summary>
            Logout from the SystemWeaver server/database.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.ReportNodeConsistency">
            <summary>
            [internal, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetSystemVariableString(System.String)">
            <summary>Reads a SystemWeaver system variable as a string. If the variable with that name does not exist an empty string is returned.</summary>
            <param name="name">The qualified name of the system variable.</param>
            <remarks>
            See <see cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableData(System.String,System.Byte[])"/> for a discussion about SystemWeaver system variables.
            </remarks>
            <returns>The value as a string.</returns>
            <seealso cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableString(System.String,System.String)"></seealso>
            <seealso cref="M:SystemWeaver.Common.IswBroker.GetSystemVariableData(System.String)"></seealso>
            <seealso cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableData(System.String,System.Byte[])"></seealso>
            <example>
            Example of reading a SystemWeaver system variable.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            string varValue = broker.GetSystemVariableString("MyAppNameMyVarName");
            Console.WriteLine("The value of MyAppNameMyVarName is: " + varValue);</code></example>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.SetSystemVariableString(System.String,System.String)">
            <summary>
            Sets a SystemWeaver system variable as a string.
            </summary>
            <param name="name">The qualified name of the system variable.</param>
            <param name="value">The new value as a string</param>
            <seealso cref="M:SystemWeaver.Common.IswBroker.GetSystemVariableString(System.String)"/>
            <seealso cref="M:SystemWeaver.Common.IswBroker.GetSystemVariableData(System.String)"/>
            <seealso cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableData(System.String,System.Byte[])"/>
            <remarks>
            See <see cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableData(System.String,System.Byte[])"/> for a discussion about SystemWeaver system variables.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetSystemVariableData(System.String)">
            <summary>Reads a SystemWeaver system variable as a byte array. If the variable of that name does not exist an empty array is returned.</summary>
            <param name="name">The qualified name of the system variable.</param>
            <remarks>
            See <see cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableData(System.String,System.Byte[])"/> for a discussion about SystemWeaver system variables.
            </remarks>
            <returns>The value as a byte array.</returns>
            <seealso cref="M:SystemWeaver.Common.IswBroker.GetSystemVariableString(System.String)"></seealso>
            <seealso cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableString(System.String,System.String)"></seealso>
            <seealso cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableData(System.String,System.Byte[])"></seealso>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.SetSystemVariableData(System.String,System.Byte[])">
            <summary>Reads a SystemWeaver system variable as a byte array. If a variable with that name does not exist an empty string is returned.</summary>
            <param name="name">The qualified name of the system variable.</param>
            <param name="value">The value as a byte array.</param>
            <remarks>
            	<para>System variables are a way to store key-value pairs, and can be used for a number of purposes.</para>
            	<para>One common application is to store server/database-specific application configuration data. Another example is that this is how SystemWeaver internally
            stores password policy settings.</para>
            	<para>For a simple string value use the Get/SetSystemVariableString methods.</para>
            	<para>For store structured information, compressed XML is the preferred format, and you use the Get/SetSystemVariableData methods to access the system variable.
            The max data-length is 131071 bytes.</para>
            	<para>System variables can also be used to manage unique id counters, see <see cref="M:SystemWeaver.Common.IswBroker.IncreaseSystemVariable(System.String)"/>.</para>
            	<para></para>
            	<para>There is no name-space concept, so make sure to choose a naming convention for your application that ensures that you do not collide with variable-names
            used by other applications. Names starting with # are by convention reserved for internal use.</para>
            </remarks>
            <seealso cref="M:SystemWeaver.Common.IswBroker.GetSystemVariableString(System.String)"></seealso>
            <seealso cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableString(System.String,System.String)"></seealso>
            <seealso cref="M:SystemWeaver.Common.IswBroker.GetSystemVariableData(System.String)"></seealso>
            <seealso cref="M:SystemWeaver.Common.IswBroker.IncreaseSystemVariable(System.String)"></seealso>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.IncreaseSystemVariable(System.String)">
            <summary>
            Used to atomically increase an integer-valued system variable by one. 
            </summary>
            <param name="name">The qualified name of the system variable.</param>
            <remarks>
            	<para>If the value of the named user-variable is not a valid integer then the counter is reset and 1 is returned.</para>
            	<para>This method enables the use of system variables to manage unique id counters. The increase of the value is done as an atomic operation, which means that
            even if 2 users call this method at the same time, the server will execute them serially and the value returned by the call will be different for the two
            users.</para>
            	<para>Observe that the counter may be reset by calling <see cref="M:SystemWeaver.Common.IswBroker.SetSystemVariableString(System.String,System.String)"/>, so the server by itself cannot guarantee that the given integer is forever
            unique.</para>
            </remarks>
            <returns>The new unique value.</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            const string TheVariableName = "MyApplication_MyApp_Counter1";
             
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            // First we initialize the variable
            broker.SetSystemVariableString(TheVariableName, "1");
            string value = broker.GetSystemVariableString(TheVariableName);
             
            // The value should be 1.
            Console.WriteLine("The value is: " + value);
             
            // Then we ask the server to increase the value by 1.
            value = broker.IncreaseSystemVariable(TheVariableName);
             
            // The value should now be 2.
            Console.WriteLine("The value is: " + value);</code>
            </example>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.MakeText(System.String)">
            <summary>
            Replaces each escaped field code in specified string the current value in meta-data.
            </summary>
            <param name="text">A String containing zero or more field codes.</param>
            <returns>A copy of the supplied string but with field codes evaluated.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetObject(System.Int64)">
            <summary>
            [Not cached] Returns the SystemWeaver object with given handle, or exception if object not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of object</param>
            <returns>Object with given handle</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If object not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindObjects(System.Int64[])">
            <summary>
            [internal, do not use] Returns the objects it can find with given handles.
            </summary>
            <param name="handles">.Handles of sought for objects</param>
            <remarks>
            	<para>This call is very slow and will communicate with the server once for each object it cannot find in the cache, so use of this method is discouraged.</para>
            	<para>If you supply a handle for which there is no corresponding object, this handle will be silently ignored.</para>
            	<para>If you supply a nil handle a nil object will be added to the result.</para>
            </remarks>
            <returns>Found objects.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetType(System.Int64)">
            <summary>
            Returns the SystemWeaver type with given handle, or exception if the type is not found. Returns a nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of type</param>
            <returns>Type with given handle</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If type not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.swType(System.String)">
            <summary>
            Gets the type with given sid, or exception if a type with given sid does not exist.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The SystemWeaver type with given SID.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If type with given SID does not exist.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindTypeWithSID(System.String)">
            <summary>
            Gets the type with given sid, or null if a type with given sid does not exist.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The type with given sid  or null.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.DoesTypeExist(System.String)">
            <summary>
            Checks if a type with given sid exists.
            </summary>
            <param name="SID">The sid.</param>
            <returns>True if a type with given sid exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetItemType(System.Int64)">
            <summary>
            Returns the SystemWeaver item-type with given handle, or exception if the item-type is not found. Returns a nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of item-type</param>
            <returns>Item-type with given handle</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If item-type not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindItemTypeWithSID(System.String)">
            <summary>
            Gets the item-type with given sid, or null if an item-type with given sid does not exist.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The item-type with given sid or null.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetItemTypeWithSID(System.String)">
            <summary>
            Gets the item-type with given sid, or exception if an item-type with given sid does not exist.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The item-type with given SID.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If item-type with given SID does not exist.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.swItemType(System.String)">
            <summary>
            Gets the item-type with given sid, or exception if an item-type with given sid does not exist.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The item-type with given SID.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If item-type with given SID does not exist.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetPartTypesOfKind(SystemWeaver.Common.SWPartTypeKind)">
            <summary>
            Returns all part-types of given kind, simple/structural/custom.
            </summary>
            <param name="kind">What kind of part-type.</param>
            <returns>The part-types of given kind.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetPartType(System.Int64)">
            <summary>
            Returns the SystemWeaver part-type with given handle, or exception if the part-type is not found. Returns a nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of part-type</param>
            <returns>Part-type with given handle</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If part-type not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindPartTypeWithSID(System.String)">
            <summary>
            Gets the item-type with given sid, or null if an item-type with given sid does not exist.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The item-type with given sid or null.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.swPartType(System.String)">
            <summary>
            Gets the part-type with given sid, or exception if a part-type with given sid does not exist.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The part-type with given SID.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If part-type with given SID does not exist.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateCategory(System.String,System.String)">
            <summary>
            [Obsolete, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetCategory(System.Int64)">
            <summary>
            [Obsolete, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetCategoryWithID(System.String)">
            <summary>
            [Obsolete, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetObj(System.Int64)">
            <summary>
            [Not cached] Returns the SystemWeaver obj with given handle, or exception if obj not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of obj.</param>
            <returns>Obj with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If obj not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetDefaultAttribute(System.Int64)">
            <summary>
            [Not cached] Returns the default-item-attribute with given handle, or exception if default-item-attribute not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of default-item-attribute</param>
            <returns>default-item-attribute with given handle</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If default-item-attribute not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetDefaultPartAttribute(System.Int64)">
            <summary>
            [Not cached] Returns the default-part-attribute with given handle, or exception if default-part-attribute not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of default-part-attribute</param>
            <returns>default-part-attribute with given handle</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If default-part-attribute not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetPart(System.Int64)">
            <summary>
            [Not cached] Returns the part with given handle, or exception if part not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of part.</param>
            <returns>Part with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If part not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetItem(System.Int64)">
            <summary>[Not cached] Returns the item with given handle. If an item is not found an exception is thrown.</summary>
            <param name="handle">The handle.</param>
            <remarks>If you supply a nil handle then a nil object will be returned. If an item with given handle is not found then an exception is raised.</remarks>
            <example>
            This example shows how to get an item with given handle.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item;
            try
            {
                item = broker.GetItem(SWHandleUtility.ToHandle("x0000001D040CB5CC"));
            }
            catch
            {
                Console.WriteLine("Item not found.");
                return;
            }
             
            Console.WriteLine("Item with given handle found, name: " + item.Name);</code></example>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindItems(System.Int64[])">
            <summary>
            [Expensive] Returns the items it can find with given handles.
            </summary>
            <param name="handles">Handles of sought for items.</param>
            <remarks>
            	<para>If you supply a handle for which there is no corresponding item, this handle will be silently ignored.</para>
            	<para>If you supply a nil handle a nil object will be added to the result.</para>
            </remarks>
            <returns>Found items.</returns>        
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateAttributeType(System.String,System.String,System.String,SystemWeaver.Common.SWAttributeDataType,SystemWeaver.Common.SWAttributeDataDimension,System.Byte[],System.Byte[])">
            <summary>
            Creates a new SystemWeaver attribute type.
            </summary>
            <param name="SID">The unique sid.</param>
            <param name="name">The name</param>
            <param name="info">Short description text</param>
            <param name="dataType">The datatype</param>
            <param name="dataDimension">The datadimension</param>
            <param name="range">The range, <see cref="P:SystemWeaver.Common.IswAttributeType.Range"/></param>
            <param name="config">The config, <see cref="P:SystemWeaver.Common.IswAttributeType.Config"/></param>
            <returns>The new attribute-type</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetAttributeType(System.Int64)">
            <summary>
            [Not cached] Returns the attribute-type with given handle, or exception if attribute-type not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of attribute-type.</param>
            <returns>Attribute-type with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If attribute-type not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindAttributeTypeWithSID(System.String)">
            <summary>
            Returns the attribute type with specified SID. If the SID is unknown, null is returned.
            </summary>
            <param name="SID">Sought for SID.</param>
            <returns>The attribute-type or null.</returns>
            <example>
            Simple example showing a call to FindAttributeTypeWithSID
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswAttributeType attributeTypeATIN = broker.FindAttributeTypeWithSID("ATIN");
            if (attributeTypeATIN != null)
            {
                Console.WriteLine("Attribute with ATIN exists and has name: " + attributeTypeATIN.Name);
            }</code></example>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.DoesAttributeTypeExist(System.String)">
            <summary>
            Returns whether an attribute type with supplied SID exist in the SystemWeaver meta model or not.
            </summary>
            <param name="SID">The SID of the sought for attribute-type.</param>
            <returns>True, if an attribute-type with supplied SID exists.</returns>
            <example>
            This example shows how to check the existence of an attribute type before using it.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
            if (broker.DoesAttributeTypeExist("AINT"))
            {
                IswAttribute attr = item.SetAttributeWithSID("AINT", "MyValue");
                Console.WriteLine("Attribute value is set to: " + attr.ValueAsString);
            }
            else
            {
                Console.WriteLine("Attribute ABAB is not defined in the meta data setup");
            }</code></example>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.AttributeType(System.String)">
            <summary>
            Returns the attribute-type with given sid, or exception if no such attribute-type exists.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The attribute-type with given sid.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If attribute-type not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetNote(System.Int64)">
            <summary>
            [Not cached] Returns the note with given handle, or exception if note not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of note.</param>
            <returns>Note with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If note not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetNoteType(System.Int64)">
            <summary>
            [Not cached] Returns the note-type with given handle, or exception if note-type not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of note-type.</param>
            <returns>Note-type with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If note-type not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateNoteType(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Creates a new note-type in the SystemWeaver database.
            </summary>
            <param name="SID">Requested sid, must be unique, cannot be changed later.</param>
            <param name="name">The name.</param>
            <param name="info">Short info.</param>
            <param name="config">The configuration</param>
            <returns>The new note-type</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If note-type with given sid already exists.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindNoteTypeWithSID(System.String)">
            <summary>
            Returns the note-type with given sid, or null if no note-type with sid exists.
            </summary>
            <param name="SID">The sid.</param>
            <returns>Note-type with given sid.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetLibrary(System.Int64)">
            <summary>
            [Not cached] Returns the library with given handle, or exception if library not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of library.</param>
            <returns>Library with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If library not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetAllLibraries">
            <summary>
            Returns all libraries in the SystemWeaver database.
            </summary>
            <returns>All libraries</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetUser(System.Int64)">
            <summary>
            [Not cached] Returns the user with given handle, or exception if user not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of user.</param>
            <returns>User with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If user not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetUserWithName(System.String)">
            <summary>
            Returns user with given login name, or nil object if user with that name does not exist.
            </summary>
            <param name="name">The login name.</param>
            <returns>User if found.</returns>
            <remarks>This call will at some point in the future be changed to generate exception if user is not found.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetGroup(System.Int64)">
            <summary>
            [Not cached] Returns the group with given handle, or exception if group not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of group.</param>
            <returns>Group with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If group not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateUser(System.String,System.String,System.String)">
            <summary>
            Creates a new user in the SystemWeaver database.
            </summary>
            <param name="loginName">The login-name. Must be unique in the database.</param>
            <param name="displayName">The full name of the user.</param>
            <param name="password">The password in plain text. Will be stored hashed in the database and cannot be retrieved again.</param>
            <returns>The new user.</returns>
            <remarks>
            The loginName is stored in and retrieved by the name property inherited from IswObject. 
            Only users with role Adminstrator may successfully call this method.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateGroup(System.String,System.String)">
            <summary>
            Creates a new SystemWeaver group.
            </summary>
            <param name="name">The unique group name.</param>
            <param name="info">Short description text.</param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetAllUsers">
            <summary>
            Returns all users in the SystemWeaver database.
            </summary>
            <returns>All users.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetAllGroups">
            <summary>
            Returns all groups in the SystemWeaver database.
            </summary>
            <returns>All groups.</returns>
            <remarks>This does not include groups defined in the issue projects.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetEntity(System.Int64)">
            <summary>
            [Not cached] Returns the entity(user or group) with given handle, or exception if entity not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of entity.</param>
            <returns>Entity with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If user or entity not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetRole(System.Int64)">
            <summary>
            [Not cached] Returns the role with given handle, or exception if role not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of role.</param>
            <returns>Role with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If role not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateRole(System.String,System.String)">
            <summary>
            Creates new SystemWeaver role.
            </summary>
            <param name="SID">The unique sid.</param>
            <param name="name">The name.</param>
            <returns>The new role.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindRoleWithSID(System.String)">
            <summary>
            Returns the role with given sid, or null if no role with sid exists.
            </summary>
            <param name="SID">The sid.</param>
            <returns>Role with given sid.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetRoleWithSID(System.String)">
            <summary>
            Gets the role with given sid, or exception if a role with given sid does not exist.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The role with given sid.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If role with given sid does not exist.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CurrentUserHasRole(System.String)">
            <summary>
            Checks if the user you are logged in as has a given role.
            </summary>
            <param name="SID">The sid of the role</param>
            <returns>True if currently logged in user has given role.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CurrentIsRoot">
            <summary>
            Checks if the user you are logged in as has the role root.
            </summary>
            <returns>True if currently logged in user has the role root.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CurrentIsAdmin">
            <summary>
            Checks if the user you are logged in as has the role admin.
            </summary>
            <returns>True if currently logged in user has the role admin.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetNode(System.Int64)">
            <summary>
            [Not cached] Returns the node with given handle, or exception if node not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of node.</param>
            <returns>Node with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If node not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateConfigItem(System.String,System.String,System.String)">
            <summary>
            Creates a new config-item.
            </summary>
            <param name="configItemTypeSID">The type of the new config-item as defined in metadata.</param>
            <param name="name">The name of the item</param>
            <param name="configTypeSID">The type which this item will configure.</param>
            <returns>The new config-item.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateConfigItem(SystemWeaver.Common.IswItemType,System.String,SystemWeaver.Common.IswType)">
            <summary>
              See <see cref="M:SystemWeaver.Common.IswBroker.CreateConfigItem(System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateProject(System.String,SystemWeaver.Common.IswProjectDefinition)">
            <summary>
            Creates a new SystemWeaver issue management project.
            </summary>
            <param name="name">The unique name of the new project.</param>
            <param name="definition">Optional parameter which makes the new project re-use the definition av an already existing project.</param>
            <returns>The new proejct.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If a project with given name already exists or the name is invalid.</exception>
            <remarks>A valid project name is a string which is non-empty and is not surrounded by white-spaces.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetProject(System.Int64)">
            <summary>
            [Not cached] Returns the SystemWeaver issue management project with given handle, or exception if project not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of project.</param>
            <returns>Project with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If project not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetMyProjects">
            <summary>
            Returns all SystemWeaver issue management project that current user has access to.
            </summary>
            <returns>All project to which current user has access.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetProjectDefinition(System.Int64)">
            <summary>
            [Not cached] Gets the project definition with given handle, or exception if project definition not found. Returns nil object if nil handle supplied.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetWorkflow(System.Int64)">
            <summary>
            [Not cached] Gets the workflow with given handle, or exception if workflow not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of workflow.</param>
            <returns>Workflow with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If workflow not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetWorkflowStatus(System.Int64)">
            <summary>
            [Not cached] Gets the workflow-status with given handle, or exception if workflow-status not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of workflow-status.</param>
            <returns>Workflow-status with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If workflow-status not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetWorkflowTransition(System.Int64)">
            <summary>
            [Not cached] Gets the issue workflow transition with given handle, or exception if transition not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of transition.</param>
            <returns>Transition with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If transition not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetIssueType(System.Int64)">
            <summary>
            [Not cached] Gets the issue-type with given handle, or exception if issue-type not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of issue-type.</param>
            <returns>Issue-type with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If issue-type not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetIssue(System.Int64)">
            <summary>
            [Not cached] Gets the issue with given handle, or exception if issue not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of issue.</param>
            <returns>Issue with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If issue not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetIssueRefType(System.Int64)">
            <summary>
            [Not cached] Gets the issue-ref-type with given handle, or exception if issue-ref-type not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of issue-ref-type.</param>
            <returns>Issue-ref-type with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If issue-ref-type not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetProjectAttributeType(System.Int64)">
            <summary>
            [Not cached] Gets the project attribute-type with given handle, or exception if project attribute-type not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of project attribute-type.</param>
            <returns>Project attribute-type with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If project attribute-type not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetView(System.Int64)">
            <summary>
            [Not cached] Gets the view with given handle, or exception if view not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of view.</param>
            <returns>View with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If view not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetIssueReport(System.Int64)">
            <summary>
            [Not cached] Gets the issue report with given handle, or exception if issue report not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of issue report.</param>
            <returns>Issue report with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If issue report not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetIssueObjRef(System.Int64)">
            <summary>
            [Not cached] Gets the issue-obj-ref with given handle, or exception if issue-obj-ref not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of issue-obj-ref.</param>
            <returns>Issue-obj-ref with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If issue-obj-ref not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetIteration(System.Int64)">
            <summary>
            [Not cached] Gets the iteration with given handle, or exception if iteration not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of iteration.</param>
            <returns>Iteration with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If iteration not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetProjectGroup(System.Int64)">
            <summary>
            [Not cached] Gets the project group with given handle, or exception if project group not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of project group.</param>
            <returns>Project group with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If project group not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindIssueWithId(System.String)">
            <summary>
            Returns issue with given id, or nil if not found.
            </summary>
            <param name="issueID">The issue id as a string, an integer in decimal form</param>
            <returns>The issue, if exists</returns>
            <remarks>
            The id much match exactly so there must be no blanks.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FindGlobalIssueRefType(System.String)">
            <summary>
              Returns the issue-ref-type with given sid, or null if no such issue-ref-type exists.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The issue-ref-type with given sid.</returns>
            <remarks>
            See <see cref="M:SystemWeaver.Common.IswBroker.GetGlobalIssueRefTypes"/> for a discussion about global issue-ref-types.
            </remarks>
            <seealso cref="M:SystemWeaver.Common.IswBroker.GetGlobalIssueRefTypes"></seealso>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetGlobalIssueRefTypes">
            <summary>Returns all global issue ref types.</summary>
            <remarks>
            	<para>Issue ref types are defined per project. However, there also exists global issue-ref-types which are automatically available to all issue management
            project. These global issue-ref-types, cannot be created, but are provided by the platform, the server.</para>
            	<para>Today there are 2 blobal issue-ref-types defined:</para>
            	<list type="bullet">
            		<item>IR - Item references, the default untyped relationship between issue and items.</item>
            		<item>DR - Description references, the automatically managed way to, in issues, insert description references to items through the description
                editor.</item>
            	</list>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetApplicationConfig(System.Guid)">
            <summary>
            [Not cached] Gets the application config with given GUID, or exception if not found.
            </summary>
            <param name="guid">GUID of application config.</param>
            <returns>Application config with given GUID.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If application config not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetApplicationConfig(System.Int64)">
            <summary>
            [Not cached] Gets the application config with given handle, or exception if not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of application config.</param>
            <returns>Application config with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If application config not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.CreateFile(System.String)">
            <summary>
            [Internal, do not use] File vault details.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.AddFileBlock(System.Int64,System.Byte[])">
            <summary>
            [Internal, do not use] File vault details.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.FinalizeFile(System.Int64,System.Int64,System.String,System.Int64@)">
            <summary>
            [Internal, do not use] File vault details.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetFileBlock(System.Int64,System.Int32)">
            <summary>
            [Internal, do not use] File vault details.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.GetFileRevision(System.Int64)">
            <summary>
            [Not cached] Gets the file revision with given handle, or exception if file revision not found. Returns nil object if nil handle supplied.
            </summary>
            <param name="handle">Handle of file revision.</param>
            <returns>File revision with given handle.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If file revision not found</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswBroker.RemoveItems(SystemWeaver.Common.IswItems,SystemWeaver.Common.IswItems@)">
            <summary>
            Tries to removes several items in one operation.
            </summary>
            <param name="items">List of items to be removed.</param>
            <param name="notRemovedItems">Returns items which could not be removed.</param>
            <remarks>
            	<para>This method will try to remove as many of the supplied items as possible.</para>
            	<para>It was created to take care of the case where you have items referring to each other and you want to remove them without getting: "Cannot remove referenced
            item".</para>
            	<para>It can also provide a substantial performance boost if you for some reason want to remove many items in one go.</para>
            	<para>It can still fail if the items are referenced by other items not included in the list of items to be removed.</para>
            	<para>If will also fail on those items the current user do not have the permissions to remove .</para>
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.Connected">
            <summary>
            Returns true if connected to the SystemWeaver server/database.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.CurrentUser">
            <summary>
            Gets which SystemWeaver user you are logged in as.
            </summary>
            <seealso cref="M:SystemWeaver.Common.IswBroker.Login(System.String,System.String)"></seealso>
            <example>
            This example shows how to display which user you are logged in as.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            Console.WriteLine("You are logged in as: " + broker.CurrentUser.DisplayName);</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.ServerId">
            <summary>
            Returns the id of the server.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.SecurityLevel">
            <summary>
            Gets and sets the security level.
            </summary>
            <remarks>
            	<para>The security level is a number used to determine how permissions on <strong>libraries and items</strong> are interpreted. The security level is number
            between 0 and 2.</para>
            	<list type="bullet">
            		<item>0, 1 - are the same. This is the default security level. Everybody has read access. Everybody has write access unless an item or library has explicit
                permissions in which case the explicit settings are used.</item>
            		<item>2 - Everybody still has read access. To get write access you have to explicity set the permission on items or</item>
            		<item>3 - Read access is not automatically added, but follows the same rules as write access and has to be explicitly set.</item>
            	</list>
            	<para>Root and owner always have the ability to change permissions. A user with role viewer never has write access.</para>
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.Types">
            <summary>Retireves all types, including all item-types and part-types and other types, defined in the SystemWeaver metadata.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.ItemTypes">
            <summary>
            Retrieves all item-types defined in the SystemWeaver metadata.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.PartTypes">
            <summary>
            Retrieves all part-types defined in the SystemWeaver metadata.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.Categories">
            <summary>
            [Obsolete, do not use]
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.AttributeTypes">
            <summary>Retrieves all attribute-types defined in the SystemWeaver metadata.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.NoteTypes">
            <summary>
            Returns all note-types defined in the SystemWeaver database.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.TopLibrary">
            <summary>Gets the Top library.</summary>
            <remarks>Every SystemWeaver database has exactly one top library which exists from the beginning. All other libraries exists somewhere in the structure beneath
            this top library.</remarks>
            <example>
            This example shows how to get the name of the top library and how to retrieve all libraries directly in the top library.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            Console.WriteLine("The name of the top libray is: " + broker.TopLibrary.Name);
             
            IswLibraries libs = broker.TopLibrary.Libraries;
            foreach (IswLibrary lib in libs)
            {
                Console.WriteLine(lib.Name + " is a library in the top library");
            }</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.Roles">
            <summary>
            Gets all roles in the SystemWeaver database.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.Q">
            <summary>The Query interface.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.Refactorings">
            <summary>The Refactorings interface.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswBroker.Lists">
            <summary>
              Factory class that creates empty lists.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswEventManager">
            <summary>
            Interface for connecting/disconnecting an object implementing IswEvent from an object working as an event dispatcher.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswEventManager.Connect(SystemWeaver.Common.IswEvent)">
            <summary>
            Connects an object implementing IswEvent to the dispatcher.
            </summary>
            <param name="AEC">The object implementing IswEvent</param>
        </member>
        <member name="M:SystemWeaver.Common.IswEventManager.DisConnect(SystemWeaver.Common.IswEvent)">
            <summary>
            Disconnects an object implementing IswEvent from the dispatcher.
            </summary>
            <param name="AEC">The object implementing IswEvent</param>
        </member>
        <member name="T:SystemWeaver.Common.IswQ">
            <summary>
            Class containing queries. These are not cached and some of these should be used with care since they are a lot of work for the server to calculate.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetTotalLibraryItemCount">
            <summary>
            Statistics function returning the total number of library-items in the database. 
            </summary>
            <returns>The number of items in the database.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetItemCount(SystemWeaver.Common.IswItemType)">
            <summary>
            Statistics function returning the number of items of specified type.
            </summary>
            <param name="itemType">The item-type</param>
            <returns>Number of items of given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetItemTypeDefPartCount(SystemWeaver.Common.IswItemType)">
            <summary>
            [Expensive] Statistics function returning the number of parts def-obj-referencing items of given type.
            </summary>
            <param name="itemType">The item-type of referenced items.</param>
            <returns>The number of parts def-obj-referencing items of this type</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetItemTypeNodeCount(SystemWeaver.Common.IswItemType)">
            <summary>
            [Expensive] Statistics function returning the number of nodes with item-property referring to an item of given type.
            </summary>
            <param name="itemType">The item-type.</param>
            <returns>The number of nodes with item-property referring to an item of given type</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetItemTypeMaxDepth(SystemWeaver.Common.IswItemType)">
            <summary>
            [Expensive] Statistics function returning the maximum depth, of all node-trees starting with the top-node of an item of given type.
            </summary>
            <param name="itemType">The item-type.</param>
            <returns>The maximum depth of all node-trees starting with the top-node of an item of given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetObjsOfType(SystemWeaver.Common.IswType)">
            <summary>
            [Expensive] Returns the handles of all objs of given type.
            </summary>
            <param name="swType">The type.</param>
            <returns>All handles of objs of given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetItemsOfType(System.String,System.Boolean,System.Boolean)">
            <summary>
            [Potentially expensive] returns all items of given type, given optional supplied conditions.
            </summary>
            <param name="itemTypeSID">The item-type</param>
            <param name="onlyLastVersions">Set true to only return items which does not have a next version.</param>
            <param name="includeSubTypes">Set true to include items of sub-type.</param>
            <returns>All items of given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetItemsOfType(SystemWeaver.Common.IswItemType,System.Boolean,System.Boolean)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswQ.GetItemsOfType(System.String,System.Boolean,System.Boolean)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetItems(System.String)">
            <summary>
            [Potentially expensive] Returns all items in the server/database which satisfies given filter-condition.
            </summary>
            <param name="filterXML">The filter xml. (not compressed)</param>
            <returns>All items satisfying given filter-condition.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetItemsAsDataTable(System.String,System.String[])">
            <summary>
            [Potentially expensive] Returns all items in the server/database which satisfies given filter-condition as a DataTable.
            </summary>
            <param name="filterXML">The filter xml. (not compressed)</param>
            <param name="fieldNames">The wanted fields.</param>
            <returns>A DataTable with a column for each given field name and a row for each item satisfying the given filter-condition.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetMyLastChanged(System.Int32)">
            <summary>
            [Not cached] Returns most recently changed items which where last changed by current user.
            </summary>
            <param name="count">Number of items to return, starting at most recently changed.</param>
            <returns>Items last changed by current user.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetPartCount(SystemWeaver.Common.IswPartType)">
            <summary>
            Returns the number of parts of given part-type.
            </summary>
            <param name="partType">The part-type.</param>
            <returns>Number of parts of given part-type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetNodeUseCount(SystemWeaver.Common.IswPartType)">
            <summary>
            [Expensive] Returns the number of nodes actually in use, of those nodes existing as a consequence of given part-type being structural.
            </summary>
            <param name="partType">The part-type</param>
            <remarks>A node is considered in use, if it has attributes set on it, or if it is referenced by a part through def-obj or ref-obj.</remarks>
            <returns>Number of used nodes of those nodes existing as a consequence of given part-type being structural.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetPartTypeNodeCount(SystemWeaver.Common.IswPartType)">
            <summary>
            [Expensive] Returns the number of nodes existing as a consequence of given part-type being structural.
            </summary>
            <param name="partType">The part-type.</param>
            <returns>Number of nodes existing as a consequence of given part-type being structural.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetPartTypePartNameCount(SystemWeaver.Common.IswPartType)">
            <summary>
            [Expensive] Returns the number of parts of given part-type with explicit names set instead of inheriting the name from def-obj.
            </summary>
            <param name="partType">The part-type.</param>
            <returns>Number of parts of given part-type with explicit names.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetAttributeTypeUsageCount(SystemWeaver.Common.IswAttributeType)">
            <summary>
            Returns the number of attributes of given type.
            </summary>
            <param name="attributeType">The attribute-type.</param>
            <returns>Number of attributes of given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetAttributeTypeUsageDataSize(SystemWeaver.Common.IswAttributeType)">
            <summary>
            [Expensive] Returns the actual number of bytes in the server/database used to store all values of all attributes of given type.
            </summary>
            <param name="attributeType">The attribute-type.</param>
            <returns>The sum of the size of all attribute-values of given attribute-type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetItemTypeUsageDataSize(SystemWeaver.Common.IswItemType)">
            <summary>
            [Expensive] Returns a rough estimate of the number of bytes needed to represent all items of given type.
            </summary>
            <param name="itemType">The item-type.</param>
            <returns>A number describing the size of all items of given type.</returns>
            <remarks>The size of the descriptions are not included.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetProjectDefinitionUseCount(SystemWeaver.Common.IswProjectDefinition)">
            <summary>
            Returns the number of projects using specified project definition.
            </summary>
            <param name="projectDefinition">The project definition.</param>
            <returns>Number of projects using given definition.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetPathItems(SystemWeaver.Common.IswItem,System.String)">
            <summary>
            Returns the items given by following given path.
            </summary>
            <param name="item">The item to start at</param>
            <param name="path">The path</param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.GetPathItemsCount(SystemWeaver.Common.IswItem,System.String)">
            <summary>
            Returns the number of unique items obtained by following the given path.
            </summary>
            <param name="item">The item to start at</param>
            <param name="path">The path</param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.ExecutePathAsItems(SystemWeaver.Common.IswItem,System.String)">
            <summary>
            Executes given path on given item and returns the resulting items.
            </summary>
            <param name="startItem">The item from where to start executing the path</param>
            <param name="path">The path expression as a string</param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.ExecutePathAsDataTable(SystemWeaver.Common.IswItem,System.String,System.String[])">
            <summary>
            Executes given path on given item and returns the resulting items as datatable.
            </summary>
            <param name="startItem">The item from where to start executing the path</param>
            <param name="path">The path expression as a string</param>
            <param name="fieldNames">The wanted fields.</param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswQ.ExecutePathAsHandles(SystemWeaver.Common.IswItem,System.String)">
            <summary>
            Executes given path on given item and returns the resulting items handles.
            </summary>
            <param name="startItem">The item from where to start executing the path</param>
            <param name="path">The path expression as a string</param>
            <returns></returns>
        </member>
        <member name="T:SystemWeaver.Common.IswObject">
            <summary>
            Base class for all SystemWeaver objects having their own identity.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObject.Swot">
            <summary>
            [internal, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObject.Remove">
            <summary>
            Call this to forever remove object from database.
            </summary>
            <exception cref="T:SystemWeaver.Common.SWException">If you cannot remove item, either due to insufficient privileges, or object beeing referenced by other objects.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswObject.FieldAsString(System.String)">
            <summary>
            Returns the value as a string of a property with given name.
            </summary>
            <remarks>
            	<para>This is a general way to get property values in runtime.</para>
            	<para>For example, it is used in the report generator to display values through the &lt;Text&gt; tag.</para>
            	<para>It is also used in the swExplorer GUI where you can right-click a column and select "Add field column".</para>
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObject.Equals(System.Object)">
            <summary>
            Implements the equals operator defined by IEquatable &lt;IswObject&gt; .Equals.
            </summary>
            <param name="o">The object to compare with</param>
            <returns></returns>
        </member>
        <member name="P:SystemWeaver.Common.IswObject.IsNil">
            <summary>Returns true if the object is a nil object.</summary>
            <remarks>Most SystemWeaver API calls returning a SystemWeaver object returns a corresponding nil object instead of returning null or generating an exception. To test if
            a nil object has been returned use the IsNil Property.</remarks>
            <example>
            This example shows how to use IsNil do determine that an item is the first version.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
            if (!item.IsNil)
            {
                Console.WriteLine("A newly created item is not nil");
            }
             
            if (item.PrevVersion.IsNil)
            {
                Console.WriteLine("A new item does not have a previous version so PrevVersion returns a nil item");
            }</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswObject.HandleStr">
            <summary>
                The database-unique identifier (handle) of a SystemWeaver Object as a string.
            </summary>
            <example>
            This example shows how the HandleStr uniquely represents a SystemWeaver object.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
            string handleStr = item.HandleStr;
             
            Console.WriteLine("The handle of " + item.Name + " is " + handleStr);
             
            IswItem item2 = broker.GetItem(SWHandleUtility.ToHandle(handleStr));
             
            // Verify that item2 we get from the broker through the handle is the same item.
            if (SWUtility.Equals(item, item2)) 
            {
                Console.WriteLine("item and item2 are indeed the same item.");
            }</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswObject.Handle">
            <summary>
                The database-unique identifier (handle) of a SystemWeaver Object.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswObject.Name">
            <summary>The name of a SystemWeaver object.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswObject.Broker">
            <summary>
            Returns the broker to which the object belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswObject.ObjectAccess">
            <summary>Gets what access you have to an object given what user you are logged in as.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswObject.DisplayImageIndex">
            <summary>
            Returns the effective image index to be used for selecting the image for this object.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswObjects">
            <summary>
            List of SystemWeaver objects with conveniance methods.
            </summary>
            <remarks>
            To have the list sorted makes functions like HasObject, FindObject, RemoveObject, ..., to be O(log(N)), instead of O(N). 
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.Concat(SystemWeaver.Common.IswObjects)">
            <summary>
            Adds given list to this list.
            </summary>
            <param name="list">The list to add.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.ConcatUnique(SystemWeaver.Common.IswObjects)">
            <summary>
            Adds given list to this list, ignoring duplicates.
            </summary>
            <param name="list">The list to add.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.RemoveObject(SystemWeaver.Common.IswObject)">
            <summary>
            Removes first instance of given object, if exists, from this list.
            </summary>
            <param name="swObject">Object to remove.</param>
            <remarks>If given object does not exist, nothing is done.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.RemoveObjectH(System.Int64)">
            <summary>
            Removes first object with given handle, if exists, from this list.
            </summary>
            <param name="handle">The handle of object to remove.</param>
            <remarks>If object with given handle does not exist, nothing is done.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.FindObject(System.Int64)">
            <summary>
            Returns object with given handle, or null if no such object exists.
            </summary>
            <param name="handle">Handle of object to search for.</param>
            <returns>Found object or null.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.IndexOfObject(SystemWeaver.Common.IswObject)">
            <summary>
            Returns first index of given object in list, or -1 if object not found.
            </summary>
            <param name="swObject">Object to find.</param>
            <returns>Index of given object.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.IndexOfObjectH(System.Int64)">
            <summary>
            Returns first index in list of object with given handle, or -1 if object with handle not found.
            </summary>
            <param name="handle">Handle of object to find.</param>
            <returns>Index of object with handle.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.HasObjectH(System.Int64)">
            <summary>
            Check of object with given handle exists in list.
            </summary>
            <param name="handle">Handle of object to search for.</param>
            <returns>True of obejct with given handle exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.Has(SystemWeaver.Common.IswObject)">
            <summary>
            Checks if list contains given object.
            </summary>
            <param name="swObject">Object to search for.</param>
            <returns>True if object exists in list.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.HasWithName(System.String)">
            <summary>
            Checks if this list contains an object with given name.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>True if object with given name exists in list.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.FindWithName(System.String)">
            <summary>
            Searches in this list for object with given name, returning nil if such object is not found.
            </summary>
            <param name="name">Name to search for.</param>
            <returns>Object with given name.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.AddUnique(SystemWeaver.Common.IswObject)">
            <summary>
            Adds object to list, but only if it does not already exists in list.
            </summary>
            <param name="swObject">Object to add</param>
            <returns>True if added, false if object already exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.RemoveList(SystemWeaver.Common.IswObjects)">
            <summary>
            Remove objects existing in specified list from this list.
            </summary>
            <param name="list">The list with objects to remove.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.ObjectCount(SystemWeaver.Common.IswObject)">
            <summary>
            Returns the number of instances of specified object in this list.
            </summary>
            <param name="swObject">Object to search for.</param>
            <returns>Number of object-instances.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.Add(SystemWeaver.Common.IswObject)">
            <summary>
            Adds specified object to list.
            </summary>
            <param name="swObject">Object to add.</param>
            <returns>The position of the added object.</returns>
            <remarks>The object is added to the end of the list unless the list is sorted, in which case the method returns the exact position at which the object was inserted.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.HasSameContent(SystemWeaver.Common.IswObjects)">
            <summary>
            Checks if two lists are the same, i.e. they contain the same objects, ignoring order or duplicates.
            </summary>
            <param name="list">The second list</param>
            <returns>True if the lists have the same content.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.SortByName">
            <summary>
            Sorts the list on object-names.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the objects in the list using the specified IComparer.
            </summary>
            <param name="comparer">The IComparer</param>
        </member>
        <member name="M:SystemWeaver.Common.IswObjects.SortByField(System.String)">
            <summary>
            Sorts the objects in the list using specified field-value.
            </summary>
            <param name="fieldName">The field name.</param>
            <remarks>see <see cref="M:SystemWeaver.Common.IswObject.FieldAsString(System.String)"/></remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswObjects.Names">
            <summary>
            Returns a list of all the names of all the objects in the list.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswObjects.Handles">
            <summary>
            Returns the handles of all the objects in the list, in string format.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswObjects.Handles2">
            <summary>
            Returns the handles of all the objects in the list.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswObjects.Item(System.Int32)">
            <summary>
              Retrieves the object at the given index.
            </summary>
            <param name="index">Zero-based index into the list objects.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswObjects.IsSortedOnHandle">
            <summary>
            Gets and sets whether the list is sorted on handles, or not.
            </summary>
            <remarks>
            Sorting on handles has an impact on the speed of some of the operations on the list.
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswEntity">
            <summary>
            Common base interface for SystemWeaver users and groups, i.e. <see cref="T:SystemWeaver.Common.IswUser"/> and <see cref="T:SystemWeaver.Common.IswGroup"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswEntity.DisplayName">
            <summary>
            Returns the name used to visually represent the entity. 
            </summary>
            <remarks>
             For users the display-name it is the real-name property. For groups the display-name is the actual name of the group
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswEntities">
            <summary>
            List of SystemWeaver entities.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswEntities.SortByDisplayName">
            <summary>
            Sorts the entities by display-name.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswEntities.Users">
            <summary>
            Returns the entities as users. Any groups ignored.
            </summary>
            <returns>The entities as users.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswEntities.Item(System.Int32)">
            <summary>
              Retrieves the entity at the given index.
            </summary>
            <param name="index">Zero-based index into the list of enitities.</param>
            <returns>The entity at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswUser">
            <summary>
              Interface representing a SystemWeaver user.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswUser.SetPassword(System.String)">
            <summary>
              <code>SetPassword</code> sets a new password.
            </summary>
            <param name="password">New password</param>
        </member>
        <member name="M:SystemWeaver.Common.IswUser.CheckPassword(System.String)">
            <summary>
              <c>CheckPassword</c> 
            </summary>
            <param name="password"></param>
            <returns>true if <c>password</c> matches the users password.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswUser.GetSystemVariable(System.String)">
            <summary>
            String value of SystemWeaver user variable.
            </summary>
            <param name="name">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswUser.GetSystemVariableData(System.String)">
            <summary>
            Binary value of SystemWeaver user variable. 
            </summary>
            <param name="name">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswUser.SetSystemVariable(System.String,System.String)">
            <summary>
              Sets string value of a SystemWeaver user variable
            </summary>
            <param name="name">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:SystemWeaver.Common.IswUser.SetSystemVariableData(System.String,System.Byte[])">
            <summary>
              Sets binary value of a SystemWeaver user variable
            </summary>
            <param name="name">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:SystemWeaver.Common.IswUser.GetHistory">
            <summary>
             Passwords (hashed) previously used by the user.
            </summary>
            <returns>The history as compressed xml</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswUser.RegisterLogin">
            <summary>
            This method should not be used by application developers.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswUser.RealName">
            <summary>
            The real name of the user.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswUser.EMail">
            <summary>
              The users email address
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswUser.PasswordLastChanged">
            <summary>
            The date when the password was last changed.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswUser.PasswordShouldBeChanged">
            <summary>
            A bool value indicating if the user should be required to changed his password at next login.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswUser.LastLogin">
            <summary>
            The date when user last logged in.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswUser.IsActive">
            <summary>
             A bool value indicating whether the user is active.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswUsers">
            <summary>
            List of SystemWeaver users.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswUsers.Item(System.Int32)">
            <summary>
              Retrieves the user at the given index.
            </summary>
            <param name="index">Zero-based index into the list of users.</param>
            <returns>The user at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswGroup">
            <summary>
            Interface representing a SystemWeaver group.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswGroup.AddUser(SystemWeaver.Common.IswUser)">
            <summary>
            Adds a user to the group, if not already in the group.
            </summary>
            <param name="user">The user to add to the group</param>
            <remarks>
            If the user already is in the group, the method silently returns as if successful.
            </remarks>
            <exception cref="T:SystemWeaver.Common.SWException">If you try to explicitly add users to the predefined group everyone</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswGroup.RemoveUser(SystemWeaver.Common.IswUser)">
            <summary>
            Removes a user from a group, if already in group.
            </summary>
            <param name="user">The user to remove.</param>
            <remarks>
            If the user is not in the group, then the method silently returns as if successful.
            </remarks>
            <exception cref="T:SystemWeaver.Common.SWException">If you try to explicitly remove users from the predefined group everyone</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswGroup.HasMember(SystemWeaver.Common.IswEntity)">
            <summary>
            Checks if an entity is a member of the group, or any sub-groups recursively.
            </summary>
            <param name="entity">The entity</param>
            <returns>True if an entity is a member of the group or contained groups.</returns>
            <remarks>
            Currently there is no way to add a group to a group, this will be fixed in the near future.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswGroup.SetIsGroupAdministrator(SystemWeaver.Common.IswEntity,System.Boolean)">
            <summary>
            Set whether a user (or a group) is administrator of this group.
            </summary>
            <param name="entity">The user (or group)</param>
            <param name="isGroupAdministrator">true if the user (or group) should be group administrator; otherwise false.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswGroup.IsGroupAdministrator(SystemWeaver.Common.IswEntity)">
            <summary>
            Determine whether a user (or group) is group administrator.
            </summary>
            <param name="entity">The user (or group)</param>
            <returns>true if the user (or group) is group administrator; otherwise false</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswGroup.Users">
            <summary>
            Gets all users in a group.
            </summary>
            <remarks>
            The group everyone will return an empty list of users.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswGroup.GroupMembers">
            <summary>
            Get all the GroupMembers of this group.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswGroup.Info">
            <summary>
            A short description of the group.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswGroups">
            <summary>
            List of SystemWeaver groups.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswGroups.Item(System.Int32)">
            <summary>
              Retrieves the group at the given index.
            </summary>
            <param name="index">Zero-based index into the list of groups.</param>
            <returns>The group at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswRole">
            <summary>
            Interface representing a SystemWeaver role.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswRole.AddUser(SystemWeaver.Common.IswUser)">
            <summary>
            Give a user the role, if the user not already has that role.
            </summary>
            <param name="user">The user.</param>
            <remarks>
            If the specified user already has the role, than the method will silently return, as if successful.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswRole.RemoveUser(SystemWeaver.Common.IswUser)">
            <summary>
            Remove a user from a role.
            </summary>
            <param name="user">The user.</param>
            <remarks>
            If the specified user does not have role, than the method will silently return, as if successful.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswRole.Users">
            <summary>
            Returns all users with given role. 
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswRole.SID">
            <summary>
            The string identifier of the role.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswRole.Info">
            <summary>
            Gets and sets a short unformatted description text.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswRole.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswRoles">
            <summary>
            List of SystemWeaver roles.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswRoles.Item(System.Int32)">
            <summary>
              Retrieves the role at the given index.
            </summary>
            <param name="index">Zero-based index into the list of roles.</param>
            <returns>The role at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswType">
            <summary>
            Interface representing a type in the SystemWeaver meta-data, the base class for all types including item-types, part-types and issue-types.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswType.CreateSubType(System.String,System.String,System.String)">
            <summary>
            Creates a new SystemWeaver type with this type as parent.
            </summary>
            <param name="SID">The sid of the new type.</param>
            <param name="name">The name of the new type</param>
            <param name="info">A short one-line description of the new type.</param>
            <returns>The new type.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If sid already exists.</exception>
            <exception cref="T:SystemWeaver.Common.SWException">If the type cannot be sub-typed.</exception>
            <remarks>
            At present, you can only create sub-types of library-item-types or config-item-types. Subtypes of the basic type, part-type, ... is not possible and will give exception.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswType.IsSID(System.String)">
            <summary>
            The "is" operatore. Checks if a type is of a certain sid(i.e. type), respecting inheritance.
            </summary>
            <param name="sid">The sid.</param>
            <returns>True if this type or any of its ancestor-types has given sid.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswType.IsType(SystemWeaver.Common.IswType)">
            <summary>
            The "is" operator. Checks if a type is of a certain type, respecting inheritance.
            </summary>
            <param name="swType">The type.</param>
            <returns>True if this type or any of its ancestor-types is the same as the given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswType.GetConfigItems(System.String)">
            <summary>
            [Consider using <see cref="M:SystemWeaver.Common.IswType.GetAllConfigItems(System.String)"/> instead]. Returns the config-items on this exact type of given config-item-type.
            </summary>
            <param name="swConfigItemTypeSID">The sid of the config-item-type.</param>
            <returns>The config-items of given config-item-type.</returns>
            <remarks>This function returns the config-items</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswType.GetConfigItems(SystemWeaver.Common.IswItemType)">
            <summary>
             [Consider using <see cref="M:SystemWeaver.Common.IswType.GetAllConfigItems(System.String)"/> instead]. See <see cref="M:SystemWeaver.Common.IswType.GetConfigItems(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswType.GetAllConfigItems(System.String)">
            <summary>
            Returns all config-items of given config-item-type, defined on this type and all its ancestor-types.
            </summary>
            <param name="swConfigItemTypeSID">The config-item-type.</param>
            <returns>All config-items of given config-item-type, on this item-type and all its ancestors.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswType.GetAllConfigItems(SystemWeaver.Common.IswItemType)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswType.GetAllConfigItems(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswType.SetSID(System.String)">
            <summary>
            Changes the sid of a type in the SystemWeaver meta model.
            </summary>
            <param name="ASID">The new sid.</param>
            <exception cref="T:SystemWeaver.Common.SWException">If the requested sid already is in use.</exception>
            <remarks>Changing the sid should be done with utmost care.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswType.SetParent(SystemWeaver.Common.IswType)">
            <summary>
            Changes the parent of this type.
            </summary>
            <param name="newParent">The new parent.</param>
            <exception cref="T:SystemWeaver.Common.SWException">If the requested change breaks the rules of the type hierarchy.</exception>
        </member>
        <member name="P:SystemWeaver.Common.IswType.IsDeprecated">
            <summary>
            Gets or sets whether the type is deprecated.
            </summary>
            <remarks>
            This affects whether the type will show up in user views of the explorer. Also the server will prevent you from creating new items of an item-type that has been deprecated.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswType.SID">
            <summary>
            Gets the sid, which uniquely identifies a type in the SystemWeaver meta model.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswType.Info">
            <summary>
            Gets and sets the info property, a short one-liner unformatted description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswType.Parent">
            <summary>
            Gets the parent of the type, or a nil object if you call it on the base type which does not have any parent.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswType.SubTypes">
            <summary>
            Gets all 
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswType.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswType.ImageIndex">
            <summary>
            Gets and sets the image-index.
            </summary>
            <remarks>
            Is used to calculate <see cref="P:SystemWeaver.Common.IswObject.DisplayImageIndex"/>.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswType.Descendants">
            <summary>
            Returns all sub-types recursively through the type inheritance tree.
            </summary>
            <remarks>
            Thus returns all types except this type, which are of this type.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswType.Config">
            <summary>
            A zlib compressed xml, containing configurations used by a client application.
            </summary>
            <remarks>
            This property is not used by the API or server. It is a blob to be used by application developers. 
            How different application running on the same database are supposed to agree is a problem left for the future.
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswTypes">
            <summary>
            List of SystemWeaver types.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswTypes.Map(System.Action{SystemWeaver.Common.IswType})">
            <summary>
            Runs specified method for each type in the list.
            </summary>
            <param name="action">The method to run.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswTypes.SortBySID">
            <summary>
            Sorts the types by sid.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswTypes.Item(System.Int32)">
            <summary>
              Retrieves the type at the given index.
            </summary>
            <param name="index">Zero-based index into the list of types.</param>
            <returns>The type at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswItemType">
            <summary>
            Interface representing an item-type in the SystemWeaver meta-data.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItemType.CreateSubItemType(System.String,System.String,System.String)">
            <summary>
            Creates a new item-type in the SystemWeaver metadata, inheriting from this type.
            </summary>
            <param name="SID">The sid of the new item-type.</param>
            <param name="name">The name of the new item-type.</param>
            <param name="info">The info.</param>
            <returns>The new item-type.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If a type with given sid already exists.</exception>
            <remarks>
            This is a convenience function returning the same result as CreateSubType on IswType but cast to an item-type.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItemType.AddPartType(System.String,System.String,SystemWeaver.Common.SWPartTypeKind,System.String,SystemWeaver.Common.IswType,SystemWeaver.Common.IswType,System.Boolean)">
            <summary>
            Creates a part-type on this item-type.
            </summary>
            <param name="SID">The sid.</param>
            <param name="name">The name.</param>
            <param name="kind">The kind.</param>
            <param name="multiplicity">The multiplicity, single or list.</param>
            <param name="defType">Mandatory defType.</param>
            <param name="refType">Optional refType, i.e. can be null.</param>
            <param name="AUsePartName">Specify true if the parts of this type should have the possibility to have a name other than the name of def-obj.</param>
            <returns>The new part-type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItemType.AddDefaultAttribute(SystemWeaver.Common.IswAttributeType)">
            <summary>
            Sets a new default-item-attribute.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The new default-item-attribute.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItemType.GetDefaultAttributes">
            <summary>
            Returns the default-item-attributes on this specific item-type, excluding inherited default-item-attributes.
            </summary>
            <returns>The default-item-attributes on this specific item-type, excluding inherited default-item-attributes.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItemType.GetAllDefaultAttributes">
            <summary>
            Returns all default-item-attributes on this item-type, including inherited default-item-attributes.
            </summary>
            <returns>All default-item-attributes on this item-type, including inherited default-item-attributes.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswItemType.IsAbstract">
            <summary>
            Gets and sets whether an item-type is abstract.
            </summary>
            <remarks>
            An abstract item-type, cannot be instantiated, i.e. items of that type can not be created. 
            Also, you cannot change type of an item to an abstract item-type.
            But, you can make an item-type abstract while there are items of this type, in which case you will have items of an abstract item-type in the database.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswItemType.ItemInheritanceIsEnabled">
            <summary>
            Set to true to active the possibility to use the item-inheritance mechanism on items of this type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItemType.OnlyDefaultAttributesIsAllowed">
            <summary>
            Gets of sets if non-default attributes can be added to item of this type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItemType.PartTypes">
            <summary>
            Returns all part-types on this item-type, including inherited part-types.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItemType.SubItemTypes">
            <summary>
            Gets the item-types in the SystemWeaver metadata with this item-type as parent-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItemType.AllItemTypes">
            <summary>
            Returns all item-types in the SystemWeaver metadata, of this type, including this item-type and all inherited item-types recursively.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswPartType">
            <summary>
            Interface representing a SystemWeaver part-type.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswPartType.AddDefaultAttribute(SystemWeaver.Common.IswType,SystemWeaver.Common.IswAttributeType)">
            <summary>
            Adds a new default-part-attribute.
            </summary>
            <param name="defType">The defType for which this default-attribute should exist.</param>
            <param name="attributeType">The type of attribute.</param>
            <returns>The new default-part-attribute.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswPartType.OwnerType">
            <summary>
            Gets the item-type to which this part-type belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPartType.Multiplicity">
            <summary>
            Gets the multiplicity.
            </summary>
            <remarks>To change the multiplicity of a part-type you have to use <see cref="M:SystemWeaver.Common.IswRefactorings.ChangePartMultiplicityToList(SystemWeaver.Common.IswPartType)"/>.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswPartType.DefType">
            <summary>
            Gets the def-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPartType.RefType">
            <summary>
            Gets the ref-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPartType.No">
            <summary>
            The no property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPartType.UsePartName">
            <summary>
            True if parts of this type should have the possibility to have their own name, otherwise the name of a part-type will be the name of the def-obj.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPartType.DefaultAttributes">
            <summary>
            Gets all default-part-attributes on this part-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPartType.Kind">
            <summary>
            The part-type kind, simple or structural.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswItemTypes">
            <summary>
            List of SystemWeaver item-types.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItemTypes.Item(System.Int32)">
            <summary>
              Retrieves the item-type at the given index.
            </summary>
            <param name="index">Zero-based index into the list of item-types.</param>
            <returns>The item-type at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswPartTypes">
            <summary>
            List of SystemWeaver part-types.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswPartTypes.SortByNo">
            <summary>
            Sorts the part-types by the No property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPartTypes.Item(System.Int32)">
            <summary>
              Retrieves the part-type at the given index.
            </summary>
            <param name="index">Zero-based index into the list of part-types.</param>
            <returns>The part-type at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswCategory">
            <summary>
            Interface representing a SystemWeaver category.
            </summary>
            <remarks>
            A category is a way to group types. It is of no consequence for the SystemWeaver server if a type belongs to a category or not.
            It is up to the application-programmer to define the meaning and use of this grouping concept.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswCategory.AddType(SystemWeaver.Common.IswType)">
            <summary>
            Adds a type to the category.
            </summary>
            <param name="swType">The type to add.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswCategory.RemoveType(SystemWeaver.Common.IswType)">
            <summary>
            Removes a type from the category, silently returning if the type already belongs to the category.
            </summary>
            <param name="Type">The type to remove.</param>
        </member>
        <member name="P:SystemWeaver.Common.IswCategory.SID">
            <summary>
            The sid of the category.
            </summary>
            <remarks>The sid uniquely defines a category, but is not connected to the sids of SystemWeaver types.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswCategory.Types">
            <summary>
            Gets all types belonging to the category.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswCategories">
            <summary>
            List of SystemWeaver categories.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswCategories.Item(System.Int32)">
            <summary>
              Retrieves the category at the given index.
            </summary>
            <param name="index">Zero-based index into the list of categories.</param>
            <returns>The category at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswAttributeType">
            <summary>
            Represents an attribute type.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributeType.GetUseCount">
            <summary>
            [Not cached] Statistics function returning how many attribute values of this attribute type exists.
            </summary>
            <returns>The count</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributeType.ValueIsValid(System.Byte[])">
            <summary>
            Checks an attribute-value with respect to the attribute-type definition.
            </summary>
            <param name="value">The attribute-value in its raw binary form.</param>
            <returns>True if the value correctly represents a correct value of this attribut-type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributeType.GetColor(System.String)">
            <summary>
              For enumeration attributes this returns the color of an attribute-value.
            </summary>
            <param name="value">The value to be analyzed</param>
            <returns>The color</returns>
            <remark>
            This method is to be used for enumeration attributen where the Range contains the valid enuemration values and their colors. 
            If no color is set or the DataType is something other than enumeration then the color white is returned.
            </remark>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributeType.HasColors">
            <summary>
            Returns whether there are colors defined on values of this attribute-type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.SID">
            <summary>
            Gets the sid.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.DataType">
            <summary>
            Gets the data-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.DataDimension">
            <summary>
            Gets the data-dimension which tells if the attribute is single, array or set.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.MinValue">
            For integer and float attributes, returns the min-value as defined in the range property.
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.MaxValue">
            For integer and float attributes, returns the max-value as defined in the range property.
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.Range">
            The range of the attribute. The format of the value depends on the <see cref="P:SystemWeaver.Common.IswAttributeType.DataType"/>.
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.Info">
            <summary>Gets or sets Info.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.Config">
            <summary>
            Contains an xml where you can further configure an attribute type. 
            </summary>
            <remark>
            For future use, gives possibily to more specifically configure the attribute-editors. Set size, type, who knows...
            </remark>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.DefaultValue">
            <summary>
            Gets or sets the default value. 
            </summary>
            <remarks>
            
            <para>An attribute gets the default value when it is set as a default attribute. If an obj does not have the attribute-type as default and you add the attribute manually 
            the default value will not be used.
            </para>
            
            <para>If the DefaultValue begins with '#Counter.', you will activate the Unique ID functionality.</para>
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.DefaultValueAsString">
            <summary>
            Gets and sets the default value as a string.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.RangeArray">
            <summary>
            If datatype is enumeration, returns an array of the strings in the enumeration.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.IsChangeTracked">
            <summary>
            [Reservered for future use]
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeType.EmptyValueIsValid">
            <summary>
            Gets or sets whether an empty value should be considered as valid.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswAttributeTypes">
            <summary>
            List of attribute types.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributeTypes.Copy">
            <summary>
            Returns a copy of the entire array.
            </summary>
            <returns>The new copy.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributeTypes.FindWithSID(System.String)">
            <summary>
            Searches the array for an attribute-type with given sid, returning null if not found.
            </summary>
            <param name="SID">The sid to search for.</param>
            <returns>Attribute-type with given sid, or null if no such attribute-type exists in the array.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributeTypes.Map(System.Action{SystemWeaver.Common.IswAttributeType})">
            <summary>
            Runs specified method on each attribute-type in the list.
            </summary>
            <param name="action">The method to run.</param>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributeTypes.Item(System.Int32)">
            <summary>
              Retrieves the attribute-type at the given index.
            </summary>
            <param name="index">Zero-based index into the list of attribute-types.</param>
            <returns>The attribute-type at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswDefaultAttribute">
            <summary>
            Interfaces representing a default-attribute on an item-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultAttribute.ItemType">
            <summary>
            Gets the item-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultAttribute.AttrType">
            <summary>
            Gets the attribute-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultAttribute.No">
            <summary>
            Gets or sets the no.
            </summary>
            <remarks>
            The no should be used to order the default-attributes when they are presented to the user.
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswDefaultAttributes">
            <summary>
            List of default-item-attributes.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswDefaultAttributes.SortByNo">
            <summary>
            Sorts the default-item-attributes by the No property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultAttributes.AttributeTypes">
            <summary>
            Returns the list of attribute-types of the default-attributes.
            </summary>
            <remarks>
            This method does not check for duplicates.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultAttributes.Item(System.Int32)">
            <summary>
              Retrieves the default-item-attribute at the given index.
            </summary>
            <param name="index">Zero-based index into the list of default-item-attributes.</param>
            <returns>The default-item-attribute at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswDefaultPartAttribute">
            <summary>
            Interface representing a default-attribute on a part-type.
            </summary>
            <remarks>
            The existence of a default-part-attribute is dependent on the def-type, thus different parts of the same type, may have a different sets of default-part-attributes.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultPartAttribute.No">
            <summary>
            Gets or sets the no.
            </summary>
            <remarks>
            The no should be used to order the default-attributes when they are presented to the user.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultPartAttribute.DefType">
            <summary>
            Gets the def-type for which this default-part-attribute applies.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultPartAttribute.PartType">
            <summary>
            Gets the part-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultPartAttribute.AttributeType">
            <summary>
            Gets the attribute-type.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswDefaultPartAttributes">
            <summary>
            List of default-part-attributes.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswDefaultPartAttributes.SortByNo">
            <summary>
            Sorts the default-part-attributes by the No property.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswDefaultPartAttributes.GetAttributeTypes(SystemWeaver.Common.IswObj)">
            <summary>
            Returns the list of attribute-types which are applicable to specified def-obj, duplicates removed.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswDefaultPartAttributes.Item(System.Int32)">
            <summary>
              Retrieves the default-part-attribute at the given index.
            </summary>
            <param name="index">Zero-based index into the list of default-part-attributes.</param>
            <returns>The default-part-attribute at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswNoteType">
            <summary>
            This interface represents a SystemWeaver note-type.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswNoteType.IsSID(System.String)">
            <summary>
            Checks if this note-type has specified sid.
            </summary>
            <param name="SID">The sid.</param>
            <returns>True if note-type has the specified sid.</returns>
            <remarks>
            Please use this function instead of comparing directly with sid. While note-types does not reside in an inheritance hierarchy this function, there may be changes in the future.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswNoteType.SID">
            <summary>
            Gets the sid.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNoteType.Info">
            <summary>
            Gets or sets the info(short plain text description).
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNoteType.Config">
            <summary>
            [Reserved for future use.] The config will be a zlib compressed xml used to store additional configuration information.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswNoteTypes">
            <summary>
            List of note-types.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswNoteTypes.Copy">
            <summary>
            Returns a copy of the entire array.
            </summary>
            <returns>The new copy.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswNoteTypes.Item(System.Int32)">
            <summary>
              Retrieves the note-type at the given index.
            </summary>
            <param name="index">Zero-based index into the list of note-types.</param>
            <returns>The note-type at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswGroupMember">
            <summary>
              Interface representing the group membership for users or groups.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswGroupMember.Group">
            <summary>
            Gets the group to which this membership belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswGroupMember.Member">
            <summary>
            Gets the user or the group.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswGroupMember.IsGroupAdministrator">
            <summary>
            Determines whether the Member is group administrator.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswGroupMembers">
            <summary>
            List of GroupMembers
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswGroupMembers.Item(System.Int32)">
            <summary>
              Retrieves the group member at the given index.
            </summary>
            <param name="index">Zero-based index into the list of group members.</param>
            <returns>The group member at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswAC">
            <summary>
              Interface representing an access rights setting for a user or group.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAC.Entity">
            <summary>
              Gets the user/group whose access rights is being configured
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAC.AccessMode">
            <summary>
              Gets the access rights.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswLibraryAC">
            <summary>
              Interface representing access rights on a library.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswLibraryAC.swLibrary">
            <summary>
            Gets the library.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswLibraryACs">
            <summary>
            List of Library ACs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswLibraryACs.Item(System.Int32)">
            <summary>
              Retrieves the library-ac at the given index.
            </summary>
            <param name="index">Zero-based index into the list of library-ACs.</param>
            <returns>The library-ac at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswItemAC">
            <summary>
              Interface representing access rights on an item.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItemAC.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswItemACs">
            <summary>
            List of Item ACs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItemACs.Item(System.Int32)">
            <summary>
              Retrieves the item-ac at the given index.
            </summary>
            <param name="index">Zero-based index into the list of item-ACs.</param>
            <returns>The item-ac at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswProjectAC">
            <summary>
              Interface representing access rights on a project.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectAC.Project">
            <summary>
            Returns the project to which this ac is applicable.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswProjectACs">
            <summary>
            List of Project ACs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectACs.Item(System.Int32)">
            <summary>
              Retrieves the project-ac at the given index.
            </summary>
            <param name="index">Zero-based index into the list of project-ACs.</param>
            <returns>The project-ac at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswLibrary">
            <summary>
            Interface representing a SystemWeaver library.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.SetAccessIsInheritedOnSublibrariesRecursive">
            <summary>
            Sets <see cref="P:SystemWeaver.Common.IswLibrary.AccessIsInherited"/> to true on all libraries beneath this library.
            </summary>
            <remarks>
            Only sets AccessIsInherited on those libraries current user has access to, silently ignores the rest.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.SetAccess(SystemWeaver.Common.IswEntity,SystemWeaver.Common.SWAccessMode)">
            <summary>
            Sets the access for specified entity to specified access mode.
            </summary>
            <param name="entity">The user or group.</param>
            <param name="mode">The access mode.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.GetAccess(SystemWeaver.Common.IswEntity)">
            <summary>
            Returns the access mode for specified user or group.
            </summary>
            <param name="entity">The user or group.</param>
            <returns>The access for specified user or group.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.GetAccessEntities">
            <summary>
            Returns all users and groups which has explicit access rights set on this library.
            </summary>
            <returns>All users and groups which has explicit access rights set on this library.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.GetACs">
            <summary>
            Gets all ACs on this library.
            </summary>
            <returns>All ACs on this library</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.HasACs">
            <summary>
            Checks if there are explicit ACs set on this library.
            </summary>
            <returns>True if there are explicit ACs set on this library.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.GetUserAccess(SystemWeaver.Common.IswUser)">
            <summary>
            Gets the effective calculated access for specified user on this library.
            </summary>
            <param name="user">The user for which to calculate access.</param>
            <returns>The effective calculated access for specified user.</returns>
            <remarks>
            The value depends on the specified ACs for this user and groups the user may belong to, and on the security level of the server.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.GetItems(System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
              Returns the items in the library of those types specified by sids in the string collection.
            </summary>
            <param name="filter">
            	<para>List of SIDs.</para>
            	<para>Null means no condition thus matching all items.</para>
            	<para>Empty list will be interpreted as null and thus also match all items.</para>
            </param>
            <param name="ignoreInheritance">Specify true if you want exact match on item-type, i.e. excluding subtypes</param>
            <remarks>
            This is the default
            </remarks>
            <returns>Matching items</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.GetItems(System.Boolean)">
            <summary>
             Returns the items in the library of those types specified in the string. 
            </summary>
            <param name="onlyLastVersions"></param>
            <returns>The items</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.GetItems(System.String)">
            <summary>
             Returns the items in the library of given item-type. This includes items of inherited item-types.
            </summary>
            <param name="itemTypeSID">The item-type. A SID which does not exist as an item-type ín the metadata is allowed and will return an empty list.</param>
            <remarks>This is the prefered GetItems method.</remarks>
            <returns>The items.</returns>
            <example>
            This example gets all items having a specific SID from a library.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SWConnection.Instance.Broker;
             
            IswItems items = broker.TopLibrary.GetItems("ITCO");
            foreach (IswItem item in items)
            {
                Console.WriteLine("Found item with name: " + item.Name);
            }</code></example>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.CreateItem(System.String,System.String)">
            <summary>
              Creates a new item in this library.
            </summary>
            <param name="itemTypeSID">The type of the item as defined in metadata.</param>
            <param name="name">The name of the item</param>
            <returns></returns>
            <example>
            This example creates an item in a library. The created item is returned and may be worked with afterwards.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SWConnection.Instance.Broker;
             
            IswItem newItem = broker.TopLibrary.CreateItem("ITCO", "Name");
             
            Console.WriteLine("Item with name: " + newItem.Name + " created in library: " + newItem.HomeLibrary.Name);</code></example>
            <exception cref="T:SystemWeaver.Common.SWException">If the specified item-type has been marked deprecated.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.CreateItem(SystemWeaver.Common.IswItemType,System.String)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswLibrary.CreateItem(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.CreateSubLibrary(System.String)">
            <summary>
              Creates a a new library with this library as parent. 
            </summary>
            <param name="name">The name of the new library</param>
            <returns>The new library</returns>
            <example>
            This example shows how to create a new library.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SWConnection.Instance.Broker;
             
            IswLibrary newLibrary = broker.TopLibrary.CreateSubLibrary("My Library");
             
            Console.WriteLine("New library with name: " + newLibrary.Name + " created in library: " + newLibrary.Parent.Name);</code></example>
        </member>
        <member name="M:SystemWeaver.Common.IswLibrary.FindSubLibraryWithName(System.String)">
            <summary>
            Conveniance method returning the first sublibrary with given name, or null if no such library exists.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The first sublibrary with given name, or null if no such library exists.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswLibrary.CreationDate">
            <summary>
            Gets the date this library was created.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswLibrary.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswLibrary.Parent">
            <summary>
            Returns the parent library, or a nil object if this library is the top library so that no parent exists.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswLibrary.PathName">
            <summary>
            Returns the qualified name of the library.
            </summary>
            <remarks>The value is of the form "/Top library name/Sub-library/Another sub-library/This library name".</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswLibrary.Libraries">
            <summary>Gets a list of all sublibraries in a library</summary>
            <example>
            This example shows how to retrieve all the libraries in the top library.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswLibraries libs = broker.TopLibrary.Libraries;
            foreach (IswLibrary lib in libs)
            {
                Console.WriteLine(lib.Name + " is a library in the top library");
            }</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswLibrary.Owner">
            <summary>
            Get and sets the user who owns the library.
            </summary>
            <remarks>
            The owner is initially the user who created the library. It may be changed later. The owner always have hte ability to change access rights on the library.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswLibrary.AccessIsInherited">
            <summary>
            Gets and sets whether access should be inherited.
            </summary>
            <remarks>
            That access is inherited means that if you change the access for the parent library the access of this library will automatically be changed to reflect the access of the parent library. 
            Thus, if a user or group has access specified in the parent library, that will be the access rights for that user or group in this library, and cannot be changed in this library.
            But, you can still modify access to users or groups not specified in the parent library.
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswLibraries">
            <summary>
            List of libraries.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswLibraries.Item(System.Int32)">
            <summary>
              Retrieves the library at the given index.
            </summary>
            <param name="index">Zero-based index into the list of libraries.</param>
            <returns>The library at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswObj">
            <summary>
            Interface representing a SystemWeaver obj. 
            </summary>
            <remarks>
            A SystemWeaver obj, not to be confused with a SystemWeaver object which is the parent class, is the base class for items, parts, nodes and issues. 
            Note that not all functionality are applicable to all subclasses, which will be indicated on each method.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.IsSID(System.String)">
            <summary>
            Checks if the obj is of specified sid, i.e. has a type or is inherited from a type with this sid.
            </summary>
            <param name="SID">The sid.</param>
            <returns>True if obj is of specified sid.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.IsSID(System.String[])">
            <summary>
            Checks if the obj is of any of the specified sids.
            </summary>
            <param name="SIDArray">List of sids.</param>
            <returns>True if the obj is of any of the specified sids.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.IsType(SystemWeaver.Common.IswType)">
            <summary>The type of an obj as defined in the SystemWeaver metadata.</summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.AddAttribute(SystemWeaver.Common.IswAttributeType)">
            <summary>
            [Avoid, please use <see cref="M:SystemWeaver.Common.IswObj.SetAttributeDataWithSID(System.String,System.Byte[])"/> instead.] Adds a new attribute of specified attribute-type to the obj.
            </summary>
            <param name="attributeType">The attribute-type.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.SetAttributeDataWithSID(System.String,System.Byte[])">
            <summary>
            Sets the value of an attribute, creating the attribute if it does not already exist.
            </summary>
            <param name="attributeTypeSID">The sid of the attribute-type.</param>
            <param name="value">The value as byte array.</param>
            <returns>The attribute instance who has the value.</returns>
            <remarks>If value is null an attribute with no value will be created.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.SetAttributeDataOfType(SystemWeaver.Common.IswAttributeType,System.Byte[])">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswObj.SetAttributeDataWithSID(System.String,System.Byte[])"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.SetAttributeWithSID(System.String,System.String)">
            <summary>
            Sets the value of an attribute as a string, creating the attribute if it does not already exist.
            </summary>
            <param name="attributeTypeSID">The sid of the attribute-type.</param>
            <param name="value">The value as byte array.</param>
            <returns>The attribute instance who has the value.</returns>
            <remarks>
            The conversion between string and the raw byte array representation depends on the datatype. If the datatype is Text or XML the data will be stored zlib compressed. For custom it is up to the application,
            otherwise it is the string UTF-16-encoded as bytes.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.SetAttributeOfType(SystemWeaver.Common.IswAttributeType,System.String)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswObj.SetAttributeWithSID(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.GetAttributeOfType(SystemWeaver.Common.IswAttributeType)">
            <summary>
            Returns the attribute of given type on this obj, or a nil object if an attribute of that type does not exist.
            </summary>
            <param name="attributeType">The attribute type.</param>
            <returns>The attribute of given type, or a nil object if not exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.FindAttributeWithSID(System.String)">
            <summary>
            Returns the attribute of given type on this obj, or a null if an attribute of that type does not exist.
            </summary>
            <param name="SID">The attribute-type sid.</param>
            <returns>The attribute of given type, or a null if not exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.FindAttributeOfType(SystemWeaver.Common.IswAttributeType)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswObj.FindAttributeWithSID(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.GetOrMakeAttributeOfType(SystemWeaver.Common.IswAttributeType)">
            <summary>
            Returns an attribute of given type on this obj, creating it if it does not already exist.
            </summary>
            <param name="attributeType">The attribute-type.</param>
            <returns>The attribute with given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.HasAttributeWithSID(System.String)">
            <summary>
            [Avoid, please check directly for non-empty value instead.] Checks if an attribute of specifik type exists on the obj.
            </summary>
            <param name="attributeTypeSID"></param>
            <returns>True if an explicit attribute of given type exists.</returns>
            <remarks>
            This function should be avoided since the semantics for the end-user is unclear. This function may be changed in the future to return false also if the attribute exists but has empty value.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.HasAttributeOfType(SystemWeaver.Common.IswAttributeType)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswObj.HasAttributeWithSID(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.RemoveAttributeWithSID(System.String)">
            <summary>
            Completely removes the attribute of given type from the obj.
            </summary>
            <param name="SID">The attribute-type.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.RemoveAttributeOfType(SystemWeaver.Common.IswAttributeType)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswObj.HasAttributeWithSID(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.Attribute(System.String)">
            <summary>Returns attribute value of given attribute-type. If no attribute value exists a nil attribute object is returned.</summary>
            <example>
            This example shows how to retrieve an attribute value, both where the value exists and where the specified attribute type does not exist.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
            item.SetAttributeWithSID("ATIN", "123");
             
            Console.WriteLine("Integer attribute has value: " + item.Attribute("ATIN").ValueAsString);
             
            // Here there is no attribute type with SID: XXXX.
            Console.WriteLine("An atttribute value that does not exist has value: " + item.Attribute("XXXX").ValueAsString);</code></example>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.GetReferences(System.String)">
            <summary>
            [Valid for Item, Parts, Nodes][Avoid, expensive call] Returns all parts of given sid def-obj-referencing this obj.
            </summary>
            <param name="partTypeSID">The part sid, or null if searching for all parts.</param>
            <returns>All parts of given sid def-obj-referencing this obj</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.GetRefObjReferences(System.String)">
            <summary>
            [Valid for Item, Parts, Nodes][Avoid, expensive call] Returns all parts of given sid ref-obj-referencing this obj.
            </summary>
            <param name="partTypeSID">The part sid, or null if searching for all parts.</param>
            <returns>All parts of given sid ref-obj-referencing this obj.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.AddPersonalNote(System.String,System.String,SystemWeaver.Common.IswDescription)">
            <summary>
             [Valid for Item, Issues] Creates a new note with current user as owner.
            </summary>
            <param name="noteTypeSID">The type of note.</param>
            <param name="name">The name of the note, usually left blank.</param>
            <param name="description">The note text.</param>
            <returns>The new note.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.AddPersonalNote(SystemWeaver.Common.IswNoteType,System.String,SystemWeaver.Common.IswDescription)">
            <summary>
            [Valid for Item, Issues] See <see cref="M:SystemWeaver.Common.IswObj.AddPersonalNote(System.String,System.String,SystemWeaver.Common.IswDescription)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.GetNotes(System.String)">
            <summary>
            [Valid for Item, Issues] Returns all notes of given type, including all users personal notes.
            </summary>
            <param name="noteTypeSID">The note-type sid.</param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.GetNotes(SystemWeaver.Common.IswNoteType)">
            <summary>
            [Valid for Item, Issues] See <see cref="M:SystemWeaver.Common.IswObj.GetNotes(System.String)"/>.
            </summary>
            <param name="noteType">The note-type, or null to get all notes independently of note-type.</param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.AddNote(System.String,System.String,SystemWeaver.Common.IswDescription)">
            <summary>
             [Valid for Item, Issues] Creates a new note with no owner-ship.
            </summary>
            <param name="noteTypeSID">The type of note.</param>
            <param name="name">The name of the note, usually left blank.</param>
            <param name="description">The note text.</param>
            <returns>The new note.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.AddNote(SystemWeaver.Common.IswNoteType,System.String,SystemWeaver.Common.IswDescription)">
            <summary>
            [Valid for Item, Issues] See <see cref="M:SystemWeaver.Common.IswObj.AddNote(System.String,System.String,SystemWeaver.Common.IswDescription)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.AddFileByData(System.String,System.Byte[],System.Int32,System.String,SystemWeaver.Common.IswFileRevision)">
            <summary>
            Attaches a file to the obj, where the file already exists in memory compressed into a byte array.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="compressedFile">The file data compressed with zlib.</param>
            <param name="originalFileSize">The size of the original uncompressed file.</param>
            <param name="originalFileHash">The hash of the original uncompressed file, see <see cref="P:SystemWeaver.Common.IswFileRevision.Hash"/>.</param>
            <param name="prevRevision">Optional parameter indicating that the new file should be considered a new revision of specified previous file.</param>
            <returns>The new SystemWeaver file-revision object representing the file.</returns>
            <remarks>The name of the file-revision will be the supplied fileName including extension, but the path will be removed.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.AddFileByName(System.String,SystemWeaver.Common.IswFileRevision)">
            <summary>
            Adds a file to the obj, by reading it from the file system.
            </summary>
            <param name="fileName">The qualified full name, including path, of the file on the file system.</param>
            <param name="prevRevision">Optional parameter indicating that the new file should be considered a new revision of specified previous file.</param>
            <returns>The new SystemWeaver file-revision object representing the file.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.RemoveFile(SystemWeaver.Common.IswFileRevision)">
            <summary>
            Removes the reference to a file-revision from this specifik obj.
            </summary>
            <param name="fileRevision">A file-revision.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.Internal_AddFile(System.Int64,SystemWeaver.Common.IswFileRevision)">
            <summary>
            [Internal, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.GetIssueRefs(System.String)">
            <summary>
              Returns all IssueObjRefs with specified RefType pointing to this obj through the Obj property.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.GetIssueRefs(SystemWeaver.Common.IswIssueRefType)">
            <summary>
              Returns all IssueObjRefs with specified RefType pointing to this obj through the Obj property.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObj.GetAllIssueRefs">
            <summary>
              Returns all IssueObjRefs of all RefTypes pointing to this obj through the Obj property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswObj.Attributes">
            <summary>
              Returns the list of attribute values on this obj. 
            </summary>
            <remarks>
            Observe that this list does not contain default attributes defined on the item-type until they are given an explicit value.</remarks>
            <example>
            This examples shows how to get and print all attribute values on an item.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
            item.SetAttributeWithSID("ATIN", "123");
             
            IswAttributes attributes = item.Attributes;
            foreach (IswAttribute attribute in attributes)
            {
                Console.WriteLine(attribute.Name + ": " + attribute.ValueAsString);
            }</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswObj.Files">
            <summary>
            Returns all file-revisions on this obj.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswObj.swType">
            <summary>
            Gets the type of an obj. 
            </summary>
            <exception cref="T:SystemWeaver.Common.SWException">If trying to do an illegal type change.</exception>
            <remarks>
            It is also possible, with restrictions, to use this property to change the type. 
            You can change the type of an item from one item-type to another, 
            or you can change the type of an issue to another issue-type within the same project-definition. 
            Changing the type does not change existing parts or relations and may lead to an item or issue with parts or relations not conforming to metadata.
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswObjs">
            <summary>
            List of objs.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswObjs.AttributeValues(System.String)">
            <summary>
            Returns the attribute values in byte-array form, of all objs in the list, of specified attribute-type.
            </summary>
            <param name="attributeTypeSID">The attribute-type</param>
            <returns>The attribute values of given type on the objs.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswObjs.AttributeValuesAsString(System.String)">
            <summary>
            Returns the attribute values in string form, of all objs in the list, of specified attribute-type.
            </summary>
            <param name="attributeTypeSID">The attribute-type</param>
            <returns>The attribute values of given type on the objs.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswObjs.Item(System.Int32)">
            <summary>
              Retrieves the obj at the given index.
            </summary>
            <param name="index">Zero-based index into the list of objs.</param>
            <returns>The obj at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswFileRevision">
            <summary>
            Interface representing a SystemWeaver file-revision.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswFileRevision.GetData">
            <summary>
            Returns the complete file, compressed with zlib.
            </summary>
            <returns>The complete file, compressed with zlib.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswFileRevision.SaveFileByName(System.String)">
            <summary>
            Writes the complete file back to disk, at given position.
            </summary>
            <param name="fileName">The qualified name, including path of where to save the file on the file system.</param>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.RevisionNo">
            <summary>
            The revision number.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.DataSize">
            <summary>
            The size of the file as stored compressed in the SystemWeaver file repository.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.BlockCount">
            <summary>
            [Internal, do not use] The number of blocks used to store the file in the database.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.FileHandle">
            <summary>
            The handle of the file in the SystemWeaver file repository.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.FileSize">
            <summary>
            Gets original size of the uncompressed file.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.CreationDate">
            <summary>
            Gets the date and time of when the file-revision was added to the repository.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.CreatedBy">
            <summary>
            Gets the user who added the file-revision to the repository.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.Comment">
            <summary>
            Gets and sets an optional short unformatted description of the file. Max 100 characters.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.Hash">
            <summary>
            Gets the SHA-1 hash of the file, in hexadecimal string representation.
            </summary>
            <remarks>
            	<para>The sha-1 string representation is the 20 bytes in the hash as hexadecimal pairs in uppercase and without separator.</para>
            	<para>For example, the hash of an empty file is: DA39A3EE5E6B4B0D3255BFEF95601890AFD80709.</para>
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.PrevRevision">
            <summary>
            Returns the prevision revision in the file revision history.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevision.NextRevisions">
            <summary>
            Returns the next revisions in the file revision history.
            </summary>
            <remarks>
            There is no trunk or branch concepts.
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswFileRevisions">
            <summary>
            List of file revisions.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswFileRevisions.Item(System.Int32)">
            <summary>
              Retrieves the file revision at the given index.
            </summary>
            <param name="index">Zero-based index into the list of file revisions.</param>
            <returns>The file revision at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswNote">
            <summary>
            Interface representing a SystemWeaver note. Notes can be put on items and issues, not parts or nodes.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswNote.IsSID(System.String)">
            <summary>
            Checks if a note is of specified sid.
            </summary>
            <param name="SID">The type sid.</param>
            <returns>True if note is of specified sid.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswNote.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNote.Obj">
            <summary>
            The item or issue to which the note belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNote.User">
            <summary>
            Returns nil object, unless it is a personal note, in which case it is the user who created to which the note belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNote.NoteType">
            <summary>
            Get the note-type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNote.CreationDate">
            <summary>
            Returns the date and time the note was created.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNote.CreatedBy">
            <summary>
            Returns the user who created the note.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNote.LastChanged">
            <summary>
            Returns the date and time the note was last changed.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNote.LastChangedBy">
            <summary>
            Returns the user who where the last to modify the note.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswChangeNote">
            <summary>
            Superclass of note used to represent a issue change note.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswChangeNote.Field">
            <summary>
            String indicating which field the note concerns.
            </summary>
            <remarks>
            Current valid values are: 'IssueType', 'AssignedTo', 'Iteration' and 'Status'.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswChangeNote.OldValue">
            <summary>
            [reserved for future use, use OldValueAsHandle for now.] 
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswChangeNote.OldValueAsHandle">
            <summary>
            The old value as a handle of a type depending on the value of Field. 
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswChangeNote.NewValue">
            <summary>
            [reserved for future use, use NewValueAsHandle for now.] 
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswChangeNote.NewValueAsHandle">
            <summary>
            The new value as a handle of a type depending on the value of Field. 
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswNotes">
            <summary>
            List of notes.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswNotes.SortByCreationDate">
            <summary>
            Sorts the notes by creation date and time.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNotes.Item(System.Int32)">
            <summary>
              Retrieves the note at the given index.
            </summary>
            <param name="index">Zero-based index into the list of notes.</param>
            <returns>The note at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswAttribute">
            <summary>
            Interface representing a SystemWeaver attribute.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswAttribute.IsSID(System.String)">
            <summary>
            Checks the type of the attribute.
            </summary>
            <param name="SID"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswAttribute.GetColor">
            <summary>
            Calculates the coloring of the attribute given its value and the settings in the attribute-type.
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswAttribute.IsNil">
            <summary>
            Returns true if the object is a nil object.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttribute.AttributeType">
            <summary>
              Returns the type of an attribute 
            </summary>
            <example>
            This example shows how to get the type and SID of an attribute.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "A");
            IswAttribute attribute = item.SetAttributeWithSID("ATIN", "123");
            Console.WriteLine("Attribute " + attribute.Name + " is of type " +
                         attribute.AttributeType.Name + " and has SID: " +  attribute.AttributeType.SID);</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswAttribute.ValueAsString">
            <summary>
            Gets and sets the attribute-value as a string.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttribute.ValueData">
            <summary>
            Gets the attribute-value as a byte array. Can be used to set the value but it is recommended to use <see cref="M:SystemWeaver.Common.IswObj.SetAttributeWithSID(System.String,System.String)"/> instead.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswAttribute.ValueAsXML">
            <summary>
            Gets and sets the value as XML. 
            </summary>
            <remarks>
            XML Values are stored as compressed unicode string. So what this property does is that it adds compression/decompression to the ValueData property. If the datatype is XML you can use the
            property ValueAsString instead, which is aware of the compression of xml attributes, but this property is useful when the datatype is custom.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswAttribute.Owner">
            <summary>
            The obj to which the attribute belongs.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswAttributes">
            <summary>
            List of attributes.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributes.Map(System.Action{SystemWeaver.Common.IswAttribute})">
            <summary>
            Executes the speicifed method on every attribute in the list.
            </summary>
            <param name="action">The method.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributes.Concat(SystemWeaver.Common.IswAttributes)">
            <summary>
            Adds given list to this list.
            </summary>
            <param name="list">The list to add.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributes.Has(SystemWeaver.Common.IswAttribute)">
            <summary>
            Checks if list contains given attribute.
            </summary>
            <param name="attribute">Attribute to search for.</param>
            <returns>True if attribute exists in list.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributes.AddUnique(SystemWeaver.Common.IswAttribute)">
            <summary>
            Remos Adds attribute to list, but only if it does not already exists in list.
            </summary>
            <param name="attribute">Attribute to add</param>
        </member>
        <member name="M:SystemWeaver.Common.IswAttributes.RemoveAttributeOfType(SystemWeaver.Common.IswAttributeType)">
            <summary>
            Removes (first) attribute of given type from the list.
            </summary>
            <param name="attributeType">The attribute-type to search for.</param>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributes.AttributeTypes">
            <summary>
            traverses this list of attributes and returns their attribute-types.
            </summary>
            <remarks>
            An attribute-type is added for each attribute, thus duplicates may occur.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswAttributes.Item(System.Int32)">
            <summary>
              Retrieves the attribute at the given index.
            </summary>
            <param name="index">Zero-based index into the list of attributes.</param>
            <returns>The attribute at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswUserAttribute">
            <summary>
            Interface representing an attribute referencing one or several users.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswUserAttribute.User">
            <summary>
            Gets and sets the user the attribute refers to, valid for datadimension: single.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswUserAttribute.Users">
            <summary>
            Gets and sets the users the attribute refers to. Setting the value is only valid for datadimension: set.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswItem">
            <summary>
            Interface representing a systemweaver item, also called base item, as it is a base class for both library items and config items.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.IsItem(SystemWeaver.Common.IswItem)">
            <summary>
            When using-item inheritance, checks if this item "is" another item.
            </summary>
            <param name="item">The item.</param>
            <returns>True if this item "is" specified item.</returns>
            <remarks>
            Item-inheritance is meant to work like object-inheritance with corresponding is-operator. This is not to be confused with the inheritance for item-types.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.NewVersion(System.Boolean,SystemWeaver.Common.IswLibrary)">
            <summary>Creates a new version of an item.</summary>
            <param name="isBranch">Default true. Set to false if you want to create a branch.</param>
            <param name="library">
            	<para>Default the new version ends up in the same library as this item. Supply this if you want the new version to end up somewhere else.</para>
            </param>
            <remarks>If there already is a new trunk version of the item, a branch will always be created, ignoring the isBranch property.</remarks>
            <exception caption="" cref="T:SystemWeaver.Common.SWException">Will be thrown if the currently logged in user does not have write permissions in the library where the new version is to be created.</exception>
            <example>
            	<code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
             
            Console.WriteLine("Item: " + item.Name + ", version " + item.VersionNumber);
             
            IswItem item2 = item.NewVersion();
             
            Console.WriteLine("Item 2: " + item.Name + ", version " + item.VersionNumber);
             
            if (item2.PrevVersion.Equals(item))
            {
                Console.WriteLine("The previous version of Item 2 is of couse Item 1");
            }</code>
            </example>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.CloseBranch(SystemWeaver.Common.IswItem,System.Boolean)">
            <summary>
            Closes a branch and sets the item it has been merged to.
            </summary>
            <remarks>A branch can only be closed if this item is in a branch. The branch must be open, and cannot have a later main version.
            The specified item this item is merged into must be part of the same item chain, but must not create a cyclic version graph.
            </remarks>
            <param name="mergeTo">The item the branch should be merged to.</param>
            <param name="mergeItems">Indicates whether the contents of the this item should be automatically merged into the mergeTo item.</param>
            <exception cref="T:SystemWeaver.Common.SWException">If the requirements in the remarks section are not satisfied.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.Copy">
            <summary>
            [Avoid.] Creates a copy of the item, as in new version but no version relationship is established.
            </summary>
            <returns>The new item.</returns>
            <remarks>
            This method is not currently in use in the SystemWeaver explorer based applications.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetPartGroups">
            <summary>
            Returns all parts on the item, grouped by part-type.
            </summary>
            <returns>All parts on the item, grouped by part-type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.HasPartOfType(System.String)">
            <summary>
            Checks if a part of given type exists.
            </summary>
            <param name="partTypeSID">The part-type sid.</param>
            <returns>True if part of given type exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.HasPartOfType(SystemWeaver.Common.IswPartType)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.HasPartOfType(System.String)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetPrimaryAttributeValue">
            <summary>
            Gets the value of the primary attribute in string format.
            </summary>
            <returns></returns>
            <remarks>
            The primary attribute is defined by having <see cref="P:SystemWeaver.Common.IswDefaultAttribute.No">No</see>=0. among the default attributes. 
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.AddPart(System.String,SystemWeaver.Common.IswObj,SystemWeaver.Common.IswObj)">
            <summary>
            	<para>Adds a new part to an item.</para>
            </summary>
            <param name="partTypeSID">
                partTypeSID is mandatory and must be defined in the SystemWeaver metadata as a valid part for the item’s type. The part-type has to have
                multiplicity list
             </param>
            <param name="defObj">
                defObj is mandatory and is the item/part/node to which the part should refer. Must conform to the part definition in the SystemWeaver metadata.
             </param>
            <param name="refObj">
                refObj is optional and default null. 
             </param>
            <returns>
               The newly created part.
             </returns>
            <seealso cref="M:SystemWeaver.Common.IswItem.GetParts(System.String)"></seealso>
            <seealso cref="M:SystemWeaver.Common.IswItem.GetPartItems(System.String)"></seealso>
            
            GetDDPartItems Method, GetDDParts Method, FindDDItem Method, FindDefObjPart Method, FindDDObj Method, SetDDObj Method, DefObj property
            <exception cref="T:SystemWeaver.Common.SWException">
               If partTypeSID or defObj is not compatible with the defined metadata an exception is thrown.
             </exception>
            <example>
            	<para>This example adds a part with SID=”ITSC” to <em>ownerItem</em>. The created part refers to <i>itemToReference</i> and will get the same name as
            <i>itemToReference.</i> The name and other properties of the part may be changed afterwards if allowed according to metadata.</para>
            	<code title="Example" description="" lang="CS">
            IswBroker broker = SWConnection.Instance.Broker;
             
            IswItem ownerItem = broker.TopLibrary.CreateItem("BICC", "MyNewItem");
            IswItem itemToReference = broker.TopLibrary.CreateItem("BICC", "MyNewItem");
            IswPart newPart = ownerItem.AddPart("ITSC", itemToReference);
             
            Console.WriteLine("Created part: " + newPart.Name + " points at " +
                                itemToReference.Name);</code>
            </example>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.AddPart(SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswObj,SystemWeaver.Common.IswObj)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.AddPart(System.String,SystemWeaver.Common.IswObj,SystemWeaver.Common.IswObj)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.InsertPart(System.Int32,System.String,SystemWeaver.Common.IswObj,SystemWeaver.Common.IswObj)">
            <summary>
            Creates a new part with given part-no, automatically increasing part-no with 1 for following parts, to make room for the new part.
            </summary>
            <param name="partNo">The requested part-no.</param>
            <param name="partTypeSID">The part-type.</param>
            <param name="defObj">The def-obj.</param>
            <param name="refObj">The ref-obj.</param>
            <returns>The new part.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">
               If partTypeSID or defObj is not compatible with the defined metadata an exception is thrown.
             </exception>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.InsertPart(System.Int32,SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswObj,SystemWeaver.Common.IswObj)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.InsertPart(System.Int32,System.String,SystemWeaver.Common.IswObj,SystemWeaver.Common.IswObj)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetParts(System.String)">
            <summary>
            Returns all parts of given part-type.
            </summary>
            <param name="partTypeSID">The part-type.</param>
            <returns>All parts of given part-type.</returns>
            <remarks>
            If not parts of given type exists, an empty list is returned. If there exists no part with given sid, an empty list is silently returned.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetParts(SystemWeaver.Common.IswPartType)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.GetParts(System.String)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetAllParts">
            <summary>
            Returns all parts on this item.
            </summary>
            <returns>All parts on this item.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetPartItems(System.String)">
            <summary>
            Returns the def-objs as items of all parts of given sid.
            </summary>
            <param name="partTypeSID">The part-type.</param>
            <returns>The def-objs as items of all parts of given sid.</returns>
            <example>
            TODO example IswItem.GetPartItems 
            </example>
            
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetPartItems(SystemWeaver.Common.IswPartType)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.GetPartItems(System.String)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.FindDefObjPart(System.String,SystemWeaver.Common.IswObj)">
            <summary>This method returns the first part of type <em>partTypeSID</em> that points out <em>obj</em> through the DefObj property. If a part is not found, null is
            returned.</summary>
            <example>
            This example shows how to find the part in an item pointing to a specific item.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem itemA = broker.TopLibrary.CreateItem("ITCO", "A");
            IswItem itemB = broker.TopLibrary.CreateItem("ITCO", "B");
            IswItem itemC = broker.TopLibrary.CreateItem("ITCO", "C");
             
            IswPart part = itemA.FindDefObjPart("PTSC", itemB);
            if (part == null)
            {
                Console.WriteLine("There is no part in A of type PTSC that points to B");
            }
             
            itemA.AddPart("PTSC", itemB);
            itemA.AddPart("PTSC", itemC);
            part = itemA.FindDefObjPart("PTSC", itemB);
            if (part != null)
            {
                Console.WriteLine("B is pointed out by part: " + part.Name);
            }</code></example>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.FindDefObjPart(SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswObj)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.FindDefObjPart(System.String,SystemWeaver.Common.IswObj)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.FindRefObjPart(System.String,SystemWeaver.Common.IswObj)">
            <summary>This method returns the first part of type <em>partTypeSID</em> that points out <em>obj</em> through the RefObj property. If a part is not found, null is
            returned.</summary>
            <param name="partTypeSID">The part type.</param>
            <param name="obj">The obj to find as ref-obj.</param>
            <returns>The found part, or null.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.FindRefObjPart(SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswObj)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.FindRefObjPart(System.String,SystemWeaver.Common.IswObj)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetAllDefObjParts(System.String,SystemWeaver.Common.IswObj)">
            <summary>Returns all parts of type <em>partTypeSID</em> that points out <em>obj</em> through the DefObj property. </summary>
            <param name="partTypeSID">The part type.</param>
            <param name="obj">The obj to find as def-obj.</param>
            <returns>The found parts.</returns>
            <remarks>If no parts staisfying given conditions are found, an empty list will be returned.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetAllDefObjParts(SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswObj)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.GetAllDefObjParts(System.String,SystemWeaver.Common.IswObj)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetAllRefObjParts(System.String,SystemWeaver.Common.IswObj)">
            <summary>Returns all parts of type <em>partTypeSID</em> that points out <em>obj</em> through the RefObj property. </summary>
            <param name="partTypeSID">The part type.</param>
            <param name="obj">The obj to find as ref-obj.</param>
            <returns>The found parts.</returns>
            <remarks>If no parts staisfying the given conditions are found, an empty list will be returned.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetAllRefObjParts(SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswObj)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.GetAllRefObjParts(System.String,SystemWeaver.Common.IswObj)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.HasDefObjPart(System.String,SystemWeaver.Common.IswObj)">
            <summary>
            Checks if there are any parts of type <em>partTypeSID</em> that points to given <em>obj</em> through the DefObj property.
            </summary>
            <param name="partTypeSID">The part type.</param>
            <param name="obj">The obj to look for in def-obj.</param>
            <returns>True if such part exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.HasDefObjPart(SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswObj)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.HasDefObjPart(System.String,SystemWeaver.Common.IswObj)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.SetPartObj(System.String,SystemWeaver.Common.IswObj)">
            <summary>
            For part-types with multiplicity single, sets the def-obj of the part of given type, automatically creating a part if no part exists.
            </summary>
            <param name="partTypeSID">The part-type.</param>
            <param name="obj">The new def-obj.</param>
            <returns>The part, existing or created, with obj as def-obj.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If the given part-type is not applicable for this item or given obj</exception>
            <exception cref="T:SystemWeaver.Common.SWException">If the part-type is not single</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.SetPartObj(SystemWeaver.Common.IswPartType,SystemWeaver.Common.IswObj)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.SetPartObj(System.String,SystemWeaver.Common.IswObj)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetPartObj(System.String)">
            <summary>
            For part-types of multiplicity single, gets the def-obj of the part of given type, or a null-object if not exists.
            </summary>
            <param name="partTypeSID">The part-type.</param>
            <returns>The def-obj of the part of given type, or null-object if not exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetPartObj(SystemWeaver.Common.IswPartType)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswItem.GetPartObj(System.String)"/>  
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.FindPartObj(System.String)">
            <summary>
            Returns the first found part of given part type, or null if no such part exists.
            </summary>
            <param name="partTypeSID">The part type.</param>
            <returns>A part of given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.FindPartItem(System.String)">
            <summary>Returns the item that is pointed to by DefObj in the part of type partTypeSID.</summary>
            <param name="partTypeSID">The part-type.</param>
            <remarks>
            	<para>This method is essentially the same as FindPartObj but the result is cast as an IswItem.</para>
            	<para>This method is primarily intended for use with part-types of multiplicity single. For part-types of multiplicity list, use GetParts instead.</para>
            </remarks>
            <returns>
            	<para>The found item. If an item is not found, either because no part(s) exists or if the DefObj is not an item, then the method returns null.</para>
            	<para>If there are several parts of that part-type on the item, then the DefObj of the first part will be returned.</para>
            </returns>
            <seealso cref="M:SystemWeaver.Common.IswItem.GetParts(System.String)"></seealso>
            <example>
            This example shows how the use of FindPartItem in the context of a part-type of multiplicity single.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SWConnection.Instance.Broker;
             
            IswItem A = broker.TopLibrary.CreateItem("BICC", "A");
            IswItem B = broker.TopLibrary.CreateItem("BICC", "B");
            IswItem C = broker.TopLibrary.CreateItem("BICC", "C");
             
            IswItem item = A.FindPartItem("IEXD");
            Assert.IsNull(item); // IEXD is not set so item is null
             
            A.SetPartObj("IEXD", B);
            item = A.FindPartItem("IEXD");
            Console.WriteLine("Item A IEXD-references: " + item.Name); // item.Name should be B
             
            A.SetPartObj("IEXD", C);
            item = A.FindPartItem("IEXD");
            Console.WriteLine("Item A IEXD-references: " + item.Name); // item.Name should be C</code></example>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.SetAccess(SystemWeaver.Common.IswEntity,SystemWeaver.Common.SWAccessMode)">
            <summary>
            For config items, sets the access for specified entity to specified access mode.
            </summary>
            <param name="entity">The user or group.</param>
            <param name="mode">The access mode.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetAccess(SystemWeaver.Common.IswEntity)">
            <summary>
            Returns the defined access mode for specified user or group.
            </summary>
            <param name="entity">The user or group.</param>
            <returns>The access for specified user or group.</returns>
            <remarks>
            This if the explicit access mode set on this entity, the effective calculated access for a specific user is given by <see cref="M:SystemWeaver.Common.IswItem.GetUserAccess(SystemWeaver.Common.IswUser)"/>.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetAccessEntities">
            <summary>
            Returns all users and groups which has explicit access rights set on this item.
            </summary>
            <returns>All users and groups which has explicit access rights set on this item.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetACs">
            <summary>
            Gets all ACcs on this item.
            </summary>
            <returns>All ACs on this item.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.HasACs">
            <summary>
            Checks if there are explicit ACs set on this item.
            </summary>
            <returns>True if there are explicit ACs set on this item.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetUserAccess(SystemWeaver.Common.IswUser)">
            <summary>
            Gets the effective calculated access for specified user on this item.
            </summary>
            <param name="user">The user for which to calculate access.</param>
            <returns>The effective calculated access for specified user.</returns>
            <remarks>
            The value depends on the specified ACs for this user and groups the user may belong to, what roles the user belongs to, and on the security level of the server.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.StatusEditable">
            <summary>
              Checks if the item is in an editable item-status, i.e. in status Work.
            </summary>
            <returns>True if the item is in an editable item-status.</returns>
            <remarks>
              Also returns true for the obsolete status CheckedOut.
              
              Observe that you should not use this property if you want to check if the current user can change the item. 
              Just use the <see cref="P:SystemWeaver.Common.IswObject.ObjectAccess"/> property which takes into account the item-status, among other things.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.NameAndVersion">
            <summary>
            Returns the standard representation of name and version.
            </summary>
            <returns>The name and version in one string.</returns>
            <remarks>
            The representation is the name followed by the version in parentheses, i.e. %name%(%version%). 
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.GetAllReferences(System.String,System.Boolean)">
            <summary>
            [Expensive] Gets all items which, in on step or several, references this item.
            </summary>
            <param name="path">The path is either the empty string or a string of type "sid1;sid2;sid3;...".</param>
            <param name="includeNextVersions">Only valid when path is the empty string. Set True if you want to include later versions of this item and referencing items.</param>
            <returns>For empty string, returns all items which in some way, not neccesary directly, references this item. If a path is given, only those items which references this item through
            the given exact path are returned.</returns>
            <remarks>I.e. for empty string, returns all items that, which if you where to open the complete status view, this item would be somewhere among the recursively referenced items.
            I you give a path you can use * to denote that the given sid are allowed zero or more times, similarly to the * in regular expressions. </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItem.QGetAncestor">
            <summary>
            [If possible, use <see cref="P:SystemWeaver.Common.IswItem.AncestorHandle"/> instead] Returns the ancestor-item, i.e. the very first item in the version-chain.
            </summary>
            <returns>Returns the ancestor-item.</returns>
            <remarks>
            The Q indicates that this should be treated as a query, and might require a server call.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.MergedTo">
            <summary>
            If this item is a closed branch, this property gets the item it has been merged to; oterwise returns null.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.CreationDate">
            <summary>Gets the date and time when an item was created</summary>
            <example>
            This example displays the date and time an item was created
            <code title="Example" description="" lang="CS">
            IswBroker broker = SWConnection.Instance.Broker;
            IswItem item = broker.TopLibrary.CreateItem("BICC", "My new item");
            Console.WriteLine("Item " + item.Name + " was created " + 
              item.CreationDate.ToString());</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.CreatedBy">
            <summary>Gets which SystemWeaver user initially created this item.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.LastChanged">
            <summary>Gets at what date and time this item was last changed.</summary>
            <example>
            This shows how to display when an item was last changed.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
            Console.WriteLine("The item " + item.Name + " was last changed at " +
                item.LastChanged.ToString());</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.LastChangedBy">
            <summary>Gets which SystemWeaver user was the last to change this item.</summary>
            <example>
            This example shows how to display who was the last to change an item.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
            Console.WriteLine("The item " + item.Name + " was last changed by " + 
                item.LastChangedBy.DisplayName);</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.StatusLastChanged">
            <summary>Gets at what date and time the status of this item was last changed.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.StatusLastChangedBy">
            <summary>Gets which SystemWeaver user was the last to change the status of this item.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.VersionText">
            <summary>
            Short tag text usually shown together with the version number.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.VersionInfo">
            <summary>
            Longer text, usually shown in a change log, describing the changes made to the item since last version.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.VersionNumber">
            <summary>
            The version number.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.Version">
            <summary>
            Returns the standard text representation to indicate an item version, consisting of the version text concatenated with the version number.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.Description">
            <summary>The item description, containing the reference table and the actual text represented as compressed RVF.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.Owner">
            <summary>
            The item owner.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.Status">
            <summary>The item-status, i.e. work, frozen, released...</summary>
            <example>
            An example showing how to get and set the status of an item.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
             
            // The status should be work.
            Console.WriteLine("My item has status: " + item.Status.DisplayString());
             
            item.Status = SWItemStatus.Frozen;
            // Now the status should be frozen.
            Console.WriteLine("My item has status: " + item.Status.DisplayString());</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.PrevVersion">
            <summary>Returns the previous version of this item. If no previous version exists, a nil item is returned.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.TopNode">
            <summary>Gets the topnode.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.HomeLibrary">
            <summary>Gets or sets the library in which the item resides.</summary>
            <remarks>The home library is what governs the access rights on an item.</remarks>
            <example>
            This example shows how to get and set the HomeLibrary property.
            <code title="Example" description="" lang="CS">
            IswBroker broker = SystemWeaverAPI.SWConnection.Instance.Broker;
             
            IswItem item = broker.TopLibrary.CreateItem("ITCO", "My item");
             
            // Home library should be top library
            Console.WriteLine("My item resides in: " + item.HomeLibrary);
             
            IswLibrary myLibrary = broker.TopLibrary.CreateSubLibrary("My items");
            item.HomeLibrary = myLibrary;
             
            // Home library should now be the "My items" library
            Console.WriteLine("Now my item resides in: " + item.HomeLibrary);</code></example>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.NextVersions">
            <summary>This property gets all next versions of an item. The next versions are returned in a list. This is the way to get all branches of an item.</summary>
            <remarks>
            	<para>Use the <em>Branching</em> property to determine if you are in a trunk or in a branch.</para>
            	<para>Use <em>NextTrunkVersion</em> if you just want to follow the trunk of the version tree.</para>
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.Base">
            <summary>Gives the base-item if this item is item-inheriting from some other item.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.SubItems">
            <summary>Returns the items item-inheriting from this item.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.ForeignId">
            <summary>Gets or sets the foreign id.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.ForeignAncestorId">
            <summary>Gets or sets the foreign ancestor-id.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.Branching">
            <summary>Returns if this item-version is in trunk or a branch with respect to the previous version.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.NextTrunkVersion">
            <summary>Returns the next version in trunk. If no next version exists, a nil item is returned.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.AncestorHandle">
            <summary>The ancestor handle.</summary>
            <remarks>To see if 2 items are version of each other, without traversing the whole version-tree, just compare their AncestorHandle.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.AncestorHandleStr">
            <summary>The ancestor handle in standard SystemWeaver handle string format.</summary>
        </member>
        <member name="P:SystemWeaver.Common.IswItem.swItemType">
            <summary>The item-type.</summary>
            <remarks>This property returns the same objects as the property <em>swType</em> but cast to an IswItemType.</remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswItems">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItems.Map(System.Action{SystemWeaver.Common.IswItem})">
            <summary>
            Runs specified method on each item in the list.
            </summary>
            <param name="action">The method to run.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswItems.ItemsWithSameAncestor(SystemWeaver.Common.IswItem)">
            <summary>
            Returns all items in this list which has the same ancestor as given item, i.e. which are versions of given item.
            </summary>
            <param name="item">The item specifying what item-versions to remove from this list.</param>
            <returns>All items in this list with given ancestorHandle.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItems.HasItemWithAncestorHandle(System.Int64)">
            <summary>
            Returns all items in this list with given ancestorHandle.
            </summary>
            <param name="ancestorHandle">The ancestor handle to search for.</param>
            <returns>All items in this list with given ancestorHandle.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItems.RemoveListV(SystemWeaver.Common.IswItems)">
            <summary>
            Removes from this list, all items which are version of items in the given list, i.e. has the same ancestor as any item in the given list.
            </summary>
            <param name="list">The list of items to remove.</param>
            <remarks>
            	<para>The "V" in the name stands for Version, indicating that the method treats different versions of an item as the same.</para>
            	<para>This gives the same result as in calling <see cref="M:SystemWeaver.Common.IswItems.RemoveItemVAll(SystemWeaver.Common.IswItem)"/> for each item in given list.</para>
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswItems.RemoveItemVAll(SystemWeaver.Common.IswItem)">
            <summary>
            Removes all items in this list which are version of the given item, i.e. has same ancestor handle.
            </summary>
            <param name="item">The item, specifying the items to be remove from the list.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswItems.SortByCreationDate">
            <summary>
            Sorts the items by creation date and time.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItems.SortByLastChanged">
            <summary>
            Sorts the items by last changed date and time.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswItems.Copy">
            <summary>
            Returns a copy of the entire array.
            </summary>
            <returns>The new copy.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswItems.AllOfSID(System.String)">
            <summary>
            Returns all items in this list of given item-type.
            </summary>
            <param name="itemTypeSID">The item-type sid.</param>
            <returns>All items in this list of given item-type.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswItems.Item(System.Int32)">
            <summary>
              Retrieves the item at the given index.
            </summary>
            <param name="index">Zero-based index into the list of items.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswLibraryItem">
            <summary>
            Base interface representing SystemWeaver library-items.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswConfigItem">
            <summary>
            Base interface representing SystemWeaver config-items.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswConfigItem.ConfigType">
            <summary>
            Gets the type for which the config-item applies.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswConfigItems">
            <summary>
            List of config-items.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswConfigItems.Item(System.Int32)">
            <summary>
              Retrieves the config-item at the given index.
            </summary>
            <param name="index">Zero-based index into the list of config-item.</param>
            <returns>The config-item at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswPart">
            <summary>
            Interface representing a SystemWeaver part.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswPart.GetNodeReferences">
            Gets all part-references, both def-obj and ref-obj, to nodes which exists because of this part.
        </member>
        <member name="M:SystemWeaver.Common.IswPart.GetStoredName">
            <summary>
            [internal, do not use] Use the Name property to get the effective name of a part.
            </summary>
            <remark>
            This property is for internal use only.
            </remark>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswPart.MoveToBefore(SystemWeaver.Common.IswPart)">
            <summary>
            Renumber parts so that this part is moved to the position directly before given part.
            </summary>
            <param name="part">The part which this part should be put before.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswPart.MoveToAfter(SystemWeaver.Common.IswPart)">
            <summary>
            Renumber parts so that this part is moved to the position directly efter given part.
            </summary>
            <param name="part">The part which this part should be put after.</param>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.Base">
            <summary>
            When using item inheritance, this is the part in the base item which this part "is".
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.Owner">
            <summary>
            Gets the item to which this part belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.PartNo">
            <summary>
            Gets and sets the part number.
            </summary>
            <remarks>
            There is nothing which prevents you to set any number. Two parts may have the same number. 
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.DefObj">
            <summary>
            The DefObj is what the part is referring to.
            </summary>
            <remark>
            Using this property to set the DefObj should mostly be done on parts of multiplicity list. 
            When working with parts of multiplicity single you should use Item.SetDefObj instead.
            </remark>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.RefObj">
            <summary>
            The RefObj is an additional Obj a part may refer to. Is mostly not used.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.Floating">
            <summary>
            [Do not use] undocumented feature.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.ForeignId">
            <summary>
            Gets and sets the foreign id.
            </summary>
            <seealso cref="P:SystemWeaver.Common.IswItem.ForeignId"/>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.ForeignAncestorId">
            <summary>
            Gets and sets the foreign ancestor id.
            </summary>
            <seealso cref="P:SystemWeaver.Common.IswItem.ForeignId"/>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.swPartType">
            <summary>
            Gets the type of the part.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPart.AncestorHandle">
            <summary>
            Gets the ancestor handle.
            </summary>
            <parts>
            The ancestor handle is used to know which parts of different versions of the items that corresponds to each other.
            </parts>
            <seealso cref="P:SystemWeaver.Common.IswItem.AncestorHandle"/>
        </member>
        <member name="T:SystemWeaver.Common.IswParts">
            <summary>
            List of parts.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.SortByPartNo">
            <summary>
            Sorts the parts by the PartNo property.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.SortByAncestorHandle">
            <summary>
            Sorts the parts by ancestor handle.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.HasDefObj(SystemWeaver.Common.IswObj)">
            <summary>
            Checks if any parts in this list has a def-obj equal to given obj.
            </summary>
            <param name="obj">The obj to serach for among the def-objs.</param>
            <returns>True if a part exists which has given obj as def-obj.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.HasRefObj(SystemWeaver.Common.IswObj)">
            <summary>
            Checks if any parts in this list has a ref-obj equal to given obj.
            </summary>
            <param name="obj">The obj to serach for among the ref-objs.</param>
            <returns>True if a part exists which has given obj as ref-obj.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.FindDefObjPart(SystemWeaver.Common.IswObj)">
            <summary>
            Returns the first part in the list with given obj as def-obj, or null if no such part exists.
            </summary>
            <param name="obj">The obj to search for as def-obj.</param>
            <returns>True if a part exists with def-obj equal to given obj.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.FindDefObjItemPart(SystemWeaver.Common.IswItem,System.Boolean)">
            <summary>
            Returns the first part in the list with given item as def-obj, or null if no such part exists.
            </summary>
            <param name="item">The item to search for as def-obj.</param>
            <param name="includeVersions">True if different versions of the item is to be considered as a match.</param>
            <returns>The first part in the list with given item as def-obj, or null if no such part exists.</returns>
            <remarks>If includeVersions is False this function returns the same as <see cref="M:SystemWeaver.Common.IswParts.FindDefObjPart(SystemWeaver.Common.IswObj)"/></remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.GetDefObjItemParts(SystemWeaver.Common.IswItem,System.Boolean)">
            <summary>
            Returns a list of all parts in the list with given item as def-obj, or null if no such part exists.
            </summary>
            <param name="item">The item to search for as def-obj.</param>
            <param name="includeVersions">True if different versions of the item is to be considered as a match.</param>
            <returns>All parts in the list with given item as def-obj.</returns>
            <remarks>If includeVersions is False this function returns the same as <see cref="M:SystemWeaver.Common.IswParts.GetRefObjParts(SystemWeaver.Common.IswObj)"/></remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.FindOwnerPart(SystemWeaver.Common.IswItem)">
            <summary>
            Returns the first part in the list with given item as owner.
            </summary>
            <param name="AOwner">The item to search for as owner.</param>
            <returns>The first part in the list with given item as owner.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.GetDefObjParts(SystemWeaver.Common.IswObj)">
            <summary>
            Returns all parts in the list with given obj as def-obj.
            </summary>
            <param name="obj">The obj to search for as def-obj.</param>
            <returns>All parts in the list with given obj as def-obj.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.GetRefObjParts(SystemWeaver.Common.IswObj)">
            <summary>
            Returns all parts in the list with given obj as ref-obj.
            </summary>
            <param name="obj">The obj to search for as ref-obj.</param>
            <returns>All parts in the list with given obj as ref-obj.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.DefObjItems">
            <summary>
            Returns a list of all def-objs as items.
            </summary>
            <returns>All def-objs as items.</returns>
            <remarks>Def-objs who are not items are silently ignored. Duplicates are not removed.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.RefObjItems">
            <summary>
            Returns a list of all ref-objs as items.
            </summary>
            <returns>All ref-objs as items.</returns>
            <remarks>Def-objs who are not items are silently ignored. Duplicates are not removed.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.OwnerItems">
            <summary>
            Returns the list of the owner-items of the parts.
            </summary>
            <returns>The list of the owner-items of the parts.</returns>
            <remarks>Duplicates are not removed.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.DefObjItemsUnique">
            <summary>
            Returns a list of all def-objs as items, duplicates removed.
            </summary>
            <returns>All def-objs as items, duplicates removed.</returns>
            <remarks>This is the same as <see cref="M:SystemWeaver.Common.IswParts.DefObjItems"/>, but with duplicates removed. Def-objs who are not items are silently ignored.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.RefObjItemsUnique">
            <summary>
            Returns a list of all ref-objs as items, duplicates removed.
            </summary>
            <returns>All ref-objs as items, duplicates removed.</returns>
            <remarks>This is the same as <see cref="M:SystemWeaver.Common.IswParts.RefObjItems"/>, but with duplicates removed. Def-objs who are not items are silently ignored.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.DefObjItems(System.String)">
            <summary>
            Returns a list of all def-objs who are items of given type.
            </summary>
            <param name="itemTypeSID">The item-type.</param>
            <returns>The list of all def-objs who are items of given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.Map(System.Action{SystemWeaver.Common.IswPart})">
            <summary>
            Runs specified method on each part in the list.
            </summary>
            <param name="action">The method to run.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.FindUniqueDefObjPart(SystemWeaver.Common.IswObj)">
            <summary>
            Returns the part with given obj as def-obj, returning null if several parts are found, or if no such parts are found.
            </summary>
            <param name="obj">The obj to search for as def-obj.</param>
            <returns>If exists, the unique part with given obj as def-obj.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.DefObjs">
            <summary>
            Returns the list of all def-objs.
            </summary>
            <returns>The list of all def-objs.</returns>
            <remarks>Duplicates will be returned if exists.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.RefObjs">
            <summary>
            Returns the list of all ref-objs.
            </summary>
            <returns>The list of all ref-objs.</returns>
            <remarks>Duplicates will be returned if exists.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswParts.FindPartWithAncestorHandle(System.Int64)">
            <summary>
            Returns first part who has given ancestor-handle, or null if no such part exists.
            </summary>
            <param name="handle">The ancestor-handle to search for.</param>
            <returns>The first part with given ancestor-handle, or null if no such part exists.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswParts.Item(System.Int32)">
            <summary>
              Retrieves the part at the given index.
            </summary>
            <param name="index">Zero-based index into the list of parts.</param>
            <returns>The part at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswPartGroup">
            <summary>
            The part-group conveniance interface.
            </summary>
            <remarks>
            The part-group is used to group parts of the same type. It does not exists in the SystemWeaver data model, thus does not have a handle. This interface
            is added by the API to make it easer to work with parts.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswPartGroup.AddPart(SystemWeaver.Common.IswPart)">
            <summary>
            [internal, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswPartGroup.RemovePart(SystemWeaver.Common.IswPart)">
            <summary>
            [internal, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswPartGroup.Count">
            <summary>
            Returns the number of parts in this group.
            </summary>
            <returns>The number of parts in this group.</returns>
            <remarks>This method exists to avoid getting all the parts with <see cref="P:SystemWeaver.Common.IswPartGroup.Parts"/> just to find out if the parts list is empty or not.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswPartGroup.PartType">
            <summary>
            Gets the type of the parts this group contains.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPartGroup.Parts">
            <summary>
            Gets the parts in this group.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswPartGroups">
            <summary>
            List of part-groups.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswPartGroups.AddPart(SystemWeaver.Common.IswPart)">
            <summary>
            [internal, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswPartGroups.FindPartGroupOfType(SystemWeaver.Common.IswPartType)">
            <summary>
            Returns the part-group which contains the parts of given type, or null if no such part-group exists.
            </summary>
            <param name="partType">The part-type</param>
            <returns>The part-group of given part-type</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswPartGroups.SortByPartTypeNo">
            <summary>
            Sorts the part-groups by their respective part types no.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswPartGroups.Item(System.Int32)">
            <summary>
              Retrieves the part-group at the given index.
            </summary>
            <param name="index">Zero-based index into the list of part-groups.</param>
            <returns>The part-group at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswNode">
            <summary>
            The interface representing a SystemWeaver node.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.GetSubNodesOfSID(System.String)">
            <summary>
            Returns all subnodes with parts of given type.
            </summary>
            <param name="partTypeSID">The part-type sid.</param>
            <returns>All subnodes with parts of given type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.SubNodes(SystemWeaver.Common.IswPartType)">
            <summary>
            See <see cref="M:SystemWeaver.Common.IswNode.GetSubNodesOfSID(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.GetPartSubNode(SystemWeaver.Common.IswPart)">
            <summary>
            Returns the subnode with given part.
            </summary>
            <param name="part">The part, which must be a part of the node's item.</param>
            <returns>The subnode with given part.</returns>
            <exception cref="T:SystemWeaver.Common.SWException">If subnode with given part does not exists, which may occur if the given part does not belong to the item of the node, or the part is not of a structural part-type.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.FindPartSubNode(SystemWeaver.Common.IswPart)">
            <summary>
            Returns the subnode with given part, or null if no such node exists.
            </summary>
            <param name="part">The part.</param>
            <returns>The subnode with given part, or null if no such node exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.GetPathSubNode(SystemWeaver.Common.IswParts)">
            <summary>
            Returns the node given by successively calling GetPartSubNode for each part in the given path, starting at this node.
            </summary>
            <param name="APath">The path to follow.</param>
            <returns>The node given by this node and following given path.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.GetGrandMotherWithOwner(SystemWeaver.Common.IswNode)">
            <summary>
            Returns the node which you get by following the mother reference repeatedly until you get a node belonging to the node-tree owned by given ownerNode.
            </summary>
            <param name="ownerNode">The owner of searched for mother-node.</param>
            <returns>The node among mothers with given node as owner.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.GetPathRelative(SystemWeaver.Common.IswNode)">
            <summary>
            Gets the path, of this node, but stops at given node instead of topnode. Excludes this node.
            </summary>
            <param name="ANode">The node from which the path should begin</param>
            <returns>The part of this node, relative given node.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.GetPathRelativeInc(SystemWeaver.Common.IswNode)">
            <summary>
            Gets the path, of this node, but stops at given node instead of topnode. Includes this node.
            </summary>
            <param name="ANode">The node from which the path should begin</param>
            <returns>The part of this node, relative given node.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.GetPath">
            <summary>
            Returns this node as equivalent sequence of parts.
            </summary>
            <returns>The parts making up this node.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.GetAllSubNodes">
            <summary>
            Returns all subnodes of this node, independent of part-type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.PrepareSubNodes">
            <summary>
            [Optimization] Only use if necessary. Reads all subnodes of this node from the server into the client cache in one call.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswNode.GetAttributeWithSIDWithInheritance(System.String)">
            <summary>
            Starting at this node, searches throughout the mother-relationship repeatedly until an attribute of given type is found.
            </summary>
            <param name="SID">The attribute type.</param>
            <returns>The first attribute of given type on this node or any mothers. Returns null attribute if no such attribute is found.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswNode.IsTop">
            <summary>
            Returns true if this is a topnode, i.e. a node without parent, thus without part.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNode.Item">
            <summary>
            Gets the item of the node.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNode.Part">
            <summary>
            Gets the part of the node, or a nil object if this is a topnode.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNode.Parent">
            <summary>
            Gets the parent of the node, or a nil object if this is a topnode.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNode.Owner">
            <summary>
            The topnode of the node-tree to which this node belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNode.Mother">
            <summary>
            Gets the mother of this node, or a nil object if this is a topnode.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswNode.PathName">
            <summary>
            Returns the string starting with the name of the topnode, followed by the names of the parts in the path.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswNodes">
            <summary>
            List of nodes.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswNodes.FindItemNode(SystemWeaver.Common.IswItem,System.Boolean)">
            <summary>
            Returns the first node in the list with given item as item, or null if no such node is found.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="includeVersions">True if different versions of the item is to be considered as a match.</param>
            <returns>The first node in the list with given item as item.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswNodes.SortByPartNo">
            <summary>
            Sorts the nodes by their respective parts No property.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswNodes.Map(System.Action{SystemWeaver.Common.IswNode})">
            <summary>
            Runs specified method on each node in the list.
            </summary>
            <param name="action">The method to run.</param>
        </member>
        <member name="P:SystemWeaver.Common.IswNodes.Item(System.Int32)">
            <summary>
              Retrieves the node at the given index.
            </summary>
            <param name="index">Zero-based index into the list of nodes.</param>
            <returns>The node at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswProjectDefinition">
            <summary>
            Interface representing a SystemWeaver project definition.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.AddWorkflow(System.String)">
            <summary>
            Creates a new workflow. 
            </summary>
            <param name="name">The name</param>
            <returns>The new workflow</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.AddIssueType(System.String)">
            <summary>
            Creates a new issue-type.
            </summary>
            <param name="name">The name.</param>
            <returns>The new issue-type.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.AddIssueRefType(System.String,System.String,SystemWeaver.Common.TTypeMultiplicity,System.String,System.String,SystemWeaver.Common.IswType,System.Boolean)">
            <summary>
            Creates a new issue-ref-type.
            </summary>
            <param name="SID">The unique sid to be used to identify the issue-ref-type.</param>
            <param name="name">The name</param>
            <param name="multiplicity">The multiplicity, list or single.</param>
            <param name="sourceName">The name to be used to represent the issue-ref when navigating from the ref to the source.</param>
            <param name="refName">The name to be used to represent the issue-ref when navigating from the source to the ref.</param>
            <param name="refType">What type the ref should be of.</param>
            <param name="isFloating">True if floating reference, i.e. when referencing an item, the ref should be automatically updated to the new version 
              if you make a new version of the referenced item.</param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.FindIssueRefTypeWithSID(System.String)">
            <summary>
            Returns the issue-ref-type with given sid, or null if no such issue-ref-type exists.
            </summary>
            <param name="refTypeSID">The sid.</param>
            <returns>The issue-ref-type with given sid, or null if no such issue-ref-type exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.GetIssueRefTypeWithSID(System.String)">
            <summary>
            Returns the issue-ref-type with given sid, or a nil object if no such issue-ref-type exists.
            </summary>
            <param name="refTypeSID">The sid.</param>
            <returns>The issue-ref-type with given sid, or a nil object if no such issue-ref-type exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.CreateAttributeType(System.String,System.String,System.String,SystemWeaver.Common.SWAttributeDataType,SystemWeaver.Common.SWAttributeDataDimension,System.Byte[],System.Byte[])">
            <summary>
            Creates a new attribute type in this project definition.
            </summary>
            <param name="SID">The unique sid.</param>
            <param name="name">The name.</param>
            <param name="info">Short description text.</param>
            <param name="dataType">The datatype.</param>
            <param name="dataDimension">The datadimension.</param>
            <param name="ARange">The range, <see cref="P:SystemWeaver.Common.IswAttributeType.Range"/></param>
            <param name="config">The config, <see cref="P:SystemWeaver.Common.IswAttributeType.Config"/></param>
            <returns>The new attribute-type</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.DoesAttributeTypeExist(System.String)">
            <summary>
            Checks if an attribute-type with given sid exists in this project-definition.
            </summary>
            <param name="SID">The sid.</param>
            <returns>True if an attribute-type with given sid exists in this project-definition.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.FindAttributeTypeWithSID(System.String)">
            <summary>
            Returns the attribute-type with given sid, or null if no such attribute-type exists.
            </summary>
            <param name="SID">The sid.</param>
            <returns>The attribute-type with given sid, or null if no such attribute-type exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.AddView(System.String,System.Byte[])">
            <summary>
            Creates a new issue view.
            </summary>
            <param name="name">The name of the view.</param>
            <param name="definition">The definition, a zlib compressed xml.</param>
            <returns>The new view.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectDefinition.AddReport(System.String,System.Byte[])">
            <summary>
            Creates a new issue report.
            </summary>
            <param name="name">The name of the report.</param>
            <param name="definition">The definition, a zlib compressed xml.</param>
            <returns>The new issue report.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectDefinition.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectDefinition.Owner">
            <summary>
            Gets the primary project to which the project definition belongs.
            </summary>
            <remarks>
            This is the project which determines the access rights on the project definition.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectDefinition.Workflows">
            <summary>
            Gets all workflows defined in this project-definition.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectDefinition.IssueTypes">
            <summary>
            Gets all issue-types defined in this project definition.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectDefinition.IssueRefTypes">
            <summary>
            Gets all defined issue-ref-types in this definition.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectDefinition.AttributeTypes">
            <summary>
            Returns all attribute types defined in this project definition.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectDefinition.Views">
            <summary>
            Gets all issue views defined in this project definition.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectDefinition.Reports">
            <summary>
            Gets all issue reports defined in this project definition.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswIssueType">
            <summary>
            Interface representing a SystemWeaver issue type.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueType.AddAttributeType(SystemWeaver.Common.IswProjectAttributeType)">
            <summary>
            Sets that this issues of this type should have this attribute.
            </summary>
            <param name="attributeType">The attribute type.</param>
            <exception cref="T:SystemWeaver.Common.SWException">If this issue-type and the attribute-type does not belong to the same project-definition.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueType.RemoveAttributeType(SystemWeaver.Common.IswProjectAttributeType)">
            <summary>
            Sets that issues of this issue-type no longer should have this attribute.
            </summary>
            <param name="attributeType">The attribute type.</param>
            <remarks>
            	<para>This does not remove attributes of this type on issues that exists and already has this attribute.</para>
            	<para>If specified attribute-type don't exist on the issue-type, then the method silently returns.</para>
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueType.AddIssueRefType(SystemWeaver.Common.IswIssueRefType)">
            <summary>
            Sets that issues of this type should have the specified relationship.
            </summary>
            <param name="issueRefType">The issue-ref-type defining the relationship.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueType.RemoveIssueRefType(SystemWeaver.Common.IswIssueRefType)">
            <summary>
            Sets that issues of this type no longer should have the specified relationship.
            </summary>
            <param name="issueRefType">The issue-ref-type definint the relationship.</param>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueType.AttributeTypes">
            <summary>
            Gets all attribute-types specified to be on issues of this type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueType.IssueRefTypes">
            <summary>
            Gets all issue-ref-types specified to be possible on issues of this type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueType.Workflow">
            <summary>
            Gets and sets the workflow issues of this type should use.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueType.ProjectDef">
            <summary>
            Gets the project-definition to which this issue-type belongs.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswIssueTypes">
            <summary>
            List of issue-types.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueTypes.Item(System.Int32)">
            <summary>
              Retrieves the issue-type at the given index.
            </summary>
            <param name="index">Zero-based index into the list of issue-types.</param>
            <returns>The issue-type at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswWorkflow">
            <summary>
            Interface representing a SystemWeaver workflow.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswWorkflow.AddStatus(System.String)">
            <summary>
            Creates a new status in this workflow.
            </summary>
            <param name="name">The name of the status.</param>
            <returns>The new workflow status.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswWorkflow.AddTransition(System.String,SystemWeaver.Common.SWWorkflowTransitionType,SystemWeaver.Common.IswWorkflowStatus,SystemWeaver.Common.IswWorkflowStatus)">
            <summary>
            Creates a new transition in this workflow.
            </summary>
            <param name="name">The name of the transition</param>
            <param name="swType">The type of the new status.</param>
            <param name="fromStatus">If applicable, from which status this transition is defined.</param>
            <param name="toStatus">If applicable, to which status this transition is defined.</param>
            <returns>The new workflow transition.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflow.Statuses">
            <summary>
            Gets the workflow statuses defined in this workflow.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflow.Transitions">
            <summary>
            Gets the transitions defined in this workflow.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflow.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflow.ProjectDef">
            <summary>
            Gets the project-definition to which this workflow belongs.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswWorkflows">
            <summary>
            List of workflows.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflows.Item(System.Int32)">
            <summary>
              Retrieves the workflow at the given index.
            </summary>
            <param name="index">Zero-based index into the list of workflows.</param>
            <returns>The workflow at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswWorkflowStatus">
            <summary>
            Interface representing a SystemWeaver workflow status.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowStatus.No">
            <summary>
            The number used to sort the workflows statuses.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowStatus.Color">
            <summary>
            Gets and sets the color used to represent the workflow status.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowStatus.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowStatus.Workflow">
            <summary>
            The workflow to which the status belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowStatus.StatusType">
            <summary>
            Type of status, open or closed.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswWorkflowStatuses">
            <summary>
            List of workflow-statuses.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswWorkflowStatuses.SortByNo">
            <summary>
            Sorts the workflows-statuses by the No property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowStatuses.Item(System.Int32)">
            <summary>
              Retrieves the workflow-status at the given index.
            </summary>
            <param name="index">Zero-based index into the list of workflow-statuses.</param>
            <returns>The workflow-status at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswWorkflowTransition">
            <summary>
            Interface representing a SystemWeaver workflow transition.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswWorkflowTransition.MoveUp">
            <summary>
            Renumbers transitions to move this transition up one step among all transitions in the workflow.
            </summary>
            <remarks>If the transition is already at the top the method silently returns.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswWorkflowTransition.MoveDown">
            <summary>
            Renumbers transitions to move this transition down one step among all transitions in the workflow.
            </summary>
            <remarks>If the transition is already at the bottom the method silently returns.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowTransition.Workflow">
            <summary>
            The workflow to which the transition belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowTransition.No">
            <summary>
            The number used to sort the workflows statuses.
            </summary>
            <remarks>
            You cannot explicitly change this no, it is done automatically by <see cref="M:SystemWeaver.Common.IswWorkflowTransition.MoveUp"/> and <see cref="M:SystemWeaver.Common.IswWorkflowTransition.MoveDown"/>.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowTransition.TransitionType">
            <summary>
            The transition type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowTransition.FromStatus">
            <summary>
            If applicable, the status from which this transition is defined.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowTransition.ToStatus">
            <summary>
            If applicable, the status to which this transition is defined.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowTransition.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowTransition.Config">
            <summary>
            The xml string used to configure this status.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswWorkflowTransitions">
            <summary>
            List of workflow-transitions.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswWorkflowTransitions.SortByNo">
            <summary>
            Sorts the workflows-transitions by the No property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswWorkflowTransitions.Item(System.Int32)">
            <summary>
              Retrieves the workflow transition at the given index.
            </summary>
            <param name="index">Zero-based index into the list of workflow transitions.</param>
            <returns>The workflow transition at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswView">
            <summary>
            Interface representing a SystemWeaver issue view, public or private.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswView.MoveUp">
            <summary>
            Renumbers public views to move this public view up one step among all views in the project definition.
            </summary>
            <remarks>This method is only applicable for public views, not private. If the view is already at the top the method silently returns.</remarks>
            <exception cref="T:SystemWeaver.Common.SWException">If you try to move a private view.</exception>
        </member>
        <member name="M:SystemWeaver.Common.IswView.MoveDown">
            <summary>
            Renumbers public views to move this public view down one step among all views in the project definition.
            </summary>
            <remarks>This method is only applicable for public views, not private. If the view is already at the bottom the method silently returns.</remarks>
            <exception cref="T:SystemWeaver.Common.SWException">If you try to move a private view.</exception>
        </member>
        <member name="P:SystemWeaver.Common.IswView.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswView.Definition">
            <summary>
            Consider using <see cref="P:SystemWeaver.Common.IswView.DefinitionXML"/> instead. Gets and sets the zlib compressed utf-16 xml string defining the view. 
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswView.DefinitionXML">
            <summary>
            Gets and sets the xml defining the view.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswView.Project">
            <summary>
            Gets the project a private view belongs to. 
            </summary>
            <remarks>Returns a nil object if it is a public view.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswView.ProjectDef">
            <summary>
            Gets the project definition a public view belongs to. 
            </summary>
            <remarks>Returns a nil object if it is a private view.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswView.No">
            <summary>
            The number used to sort the workflows statuses.
            </summary>
            <remarks>
            You cannot explicitly change this no, it is done automatically by <see cref="M:SystemWeaver.Common.IswView.MoveUp"/> and <see cref="M:SystemWeaver.Common.IswView.MoveDown"/>.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswView.Owner">
            <summary>
            Returns the user a private view belongs to
            </summary>
            <remarks>Returns a nil object if it is a public view.</remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswViews">
            <summary>
            List of issue views.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswViews.SortByNo">
            <summary>
            Sorts the views-transitions by the No property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswViews.Item(System.Int32)">
            <summary>
              Retrieves the view at the given index.
            </summary>
            <param name="index">Zero-based index into the list of views.</param>
            <returns>The view at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswIssueReport">
            <summary>
            Interface representing a SystemWeaver issue report.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueReport.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueReport.Definition">
            <summary>
            Gets and sets the zlib compressed utf-16 xml string defining the report.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueReport.Project">
            <summary>
            Gets the project a private report belongs to. 
            </summary>
            <remarks>Returns a nil object if it is a public report.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueReport.ProjectDef">
            <summary>
            Gets the project definition a public report belongs to. 
            </summary>
            <remarks>Returns a nil object if it is a public view.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueReport.Owner">
            <summary>
            Returns the user a private view belongs to
            </summary>
            <remarks>Returns a nil object if it is a public view.</remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswIssueReports">
            <summary>
            List of issue reports.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueReports.Item(System.Int32)">
            <summary>
              Retrieves the issue report at the given index.
            </summary>
            <param name="index">Zero-based index into the list of issue reports.</param>
            <returns>The issue report at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswProjectAttributeType">
            <summary>
            Interface representing an attribute-type defined in a SystemWeaver issue project definition.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectAttributeType.MoveUp">
            <summary>
            Renumbers attribute types in the project definition moving this attribute type up one step among all attribute types in the project definition.
            </summary>
            <remarks>If the attribute type is already at the top the method silently returns.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectAttributeType.MoveDown">
            <summary>
            Renumbers attribute types in the project definition moving this attribute type down one step among all attribute types in the project definition.
            </summary>
            <remarks>If the attribute type is already at the bottom the method silently returns.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectAttributeType.ProjectDef">
            <summary>
            Gets the project definition this attribute type belongs to.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectAttributeType.No">
            <summary>
            The number used to sort the attribute types in the proejct definition.
            </summary>
            <remarks>
            You cannot explicitly change this no, it is done automatically by <see cref="M:SystemWeaver.Common.IswProjectAttributeType.MoveUp"/> and <see cref="M:SystemWeaver.Common.IswProjectAttributeType.MoveDown"/>.
            </remarks>
        </member>
        <member name="T:SystemWeaver.Common.IswProjectAttributeTypes">
            <summary>
            List of project attribute types.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswProjectAttributeTypes.SortByNo">
            <summary>
            Sorts the project attribute-types by the No property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectAttributeTypes.Item(System.Int32)">
            <summary>
              Retrieves the project attribute type at the given index.
            </summary>
            <param name="index">Zero-based index into the list of project attribute types.</param>
            <returns>The project attribute type at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswIssueRefType">
            <summary>
            Interface representing a SystemWeaver issue-ref-type, aka. relationship.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueRefType.MoveUp">
            <summary>
            Renumbers issue-ref-types in the project definition moving this issue-ref-type up one step among all issue-ref-types in the project definition.
            </summary>
            <remarks>If the issue-ref-type is already at the top the method silently returns.</remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueRefType.MoveDown">
            <summary>
            Renumbers issue-ref-types in the project definition moving this issue-ref-type down one step among all issue-ref-types in the project definition.
            </summary>
            <remarks>If the issue-ref-type is already at the bottom the method silently returns.</remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefType.ProjectDef">
            <summary>
            Gets the project definition which the issue-ref-type belongs to.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefType.SID">
            <summary>
            Gets the sid identifying the relationship.
            </summary>
            <remarks>
            The is only garanteed to be unique within a project.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefType.No">
            <summary>
            The number used to sort the issue-ref-types in the proejct definition.
            </summary>
            <remarks>
            You cannot explicitly change this no, it is done automatically by <see cref="M:SystemWeaver.Common.IswIssueRefType.MoveUp"/> and <see cref="M:SystemWeaver.Common.IswIssueRefType.MoveDown"/>.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefType.Multiplicity">
            <summary>
            The multiplicity, list or single. 
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefType.SourceName">
            <summary>
            Gets and sets the name to be used to represent the issue-ref when navigating from the ref to the source.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefType.RefName">
            <summary>
            Gets and sets the name to be used to represent the issue-ref when navigating from the source to the ref.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefType.RefType">
            <summary>
            Gets and sets the type of the ref on the issue-refs of this type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefType.IsFloating">
            <summary>
            Floating. True indicates that, when referencing an item, the ref should be automatically updated to the new version 
            if you make a new version of the referenced item.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefType.Config">
            <summary>
            The xml string used to configure this issue-ref-type.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswIssueRefTypes">
            <summary>
            List of issue ref types.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueRefTypes.SortByNo">
            <summary>
            Sorts the issue-ref-types by the No property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueRefTypes.Item(System.Int32)">
            <summary>
              Retrieves the issue ref type at the given index.
            </summary>
            <param name="index">Zero-based index into the list of issue ref types.</param>
            <returns>The issue ref type at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswProject">
            <summary>
            Interface representing a SystemWeaver issue project.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.CreateOwnDefinition">
            <summary>
            Creates a copy of a shared project-definition for exclusive use in this project.
            </summary>
            <remark>
            When the project uses a shared project-definition belonging to another project, this method decouples this project from that project by 
            creating a complete copy of the project definition exclusive to this project.
            </remark>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.SetAccess(SystemWeaver.Common.IswEntity,SystemWeaver.Common.SWAccessMode)">
            <summary>
            Sets the access for specified entity to specified access mode.
            </summary>
            <param name="entity">The user or group.</param>
            <param name="accessMode">The access mode.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.GetAccess(SystemWeaver.Common.IswEntity)">
            <summary>
            Returns the access mode for specified user or group.
            </summary>
            <param name="entity">The user or group.</param>
            <returns>The access for specified user or group.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.GetAccessEntities">
            <summary>
            Returns all users and groups which has explicit access rights set on this project.
            </summary>
            <returns>All users and groups which has explicit access rights set on this project.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.GetACs">
            <summary>
            Gets all ACs on this project.
            </summary>
            <returns>All ACs on this project</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.HasACs">
            <summary>
            Checks if there are explicit ACs set on this project.
            </summary>
            <returns>True if there are explicit ACs set on this project.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.AddIssue(SystemWeaver.Common.IswIssueType,System.String)">
            <summary>
            Creates a new issue in this project.
            </summary>
            <param name="issueType">The issue type.</param>
            <param name="name">The name</param>
            <returns>The new issue</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.GetIssues(System.String)">
            <summary>
            Returns all issues in this project satisfying given filter.
            </summary>
            <param name="filterXML">The filter</param>
            <returns>All issues in this project satisfying given filter.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.AddView(System.String,System.Byte[])">
            <summary>
            Creates a new private issue view in this project.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition as zlib compressed UTF-16 xml.</param>
            <returns>The new views.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.GetMyViews">
            <summary>
            Returns all the private views for the current user.
            </summary>
            <returns>All the private views for the current user.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.AddReport(System.String,System.Byte[])">
            <summary>
            Creates a new private issue report in this project.
            </summary>
            <param name="name">The name</param>
            <param name="definition">The definition as zlib compressed UTF-16 xml.</param>
            <returns>The new issue report</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.GetMyReports">
            <summary>
            Returns all the private reports for the current user.
            </summary>
            <returns>All the private reports for the current user.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.AddIteration(System.String)">
            <summary>
            Creates a new iteration in this project.
            </summary>
            <param name="name">The name</param>
            <returns>The new iteration.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswProject.AddGroup(System.String)">
            <summary>
            Creates a new project group.
            </summary>
            <param name="name">The name of the new group.</param>
            <returns>The new group.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswProject.Iterations">
            <summary>
            Gets all iterations in this project.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProject.Groups">
            <summary>
            Gets all groups defined in this project.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProject.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProject.CreatedBy">
            <summary>
            Gets which user creates this project.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProject.CreationDate">
            <summary>
            Gets the project creation date.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProject.Definition">
            <summary>
            Gets the project definition used for this project.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswProjects">
            <summary>
            List of SystemWeaver projects.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjects.Item(System.Int32)">
            <summary>
              Retrieves the project at the given index.
            </summary>
            <param name="index">Zero-based index into the list of projects.</param>
            <returns>The project at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswProjectGroup">
            <summary>
            Interface representing a SystemWeaver project group.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectGroup.Project">
            <summary>
            Gets which project the project group belongs to.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswProjectGroups">
            <summary>
            List of project-groups.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswProjectGroups.Item(System.Int32)">
            <summary>
              Retrieves the project group at the given index.
            </summary>
            <param name="index">Zero-based index into the list of project group.</param>
            <returns>The project group at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswIteration">
            <summary>
            Interface representing a SystemWeaver issue project iteration.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIteration.No">
            <summary>
            The iteration no.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIteration.Status">
            <summary>
            Gets and sets the iteration status, open or closed.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIteration.Issues">
            <summary>
            Gets all issues belonging to this iteration.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIteration.Project">
            <summary>
            Gets the project to which the iteration belongs.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswIterations">
            <summary>
            List of iterations.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIterations.GetActive">
            <summary>
            Returns all iterations in the lists which are active.
            </summary>
            <returns>The active iterations.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswIterations.SortByNo">
            <summary>
            Sorts the iterations by their No property.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIterations.Item(System.Int32)">
            <summary>
              Retrieves the iteration at the given index.
            </summary>
            <param name="index">Zero-based index into the list of iterations.</param>
            <returns>The iteration at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswIssue">
            <summary>
            Interface representing a SystemWeaver issue.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.SetStatusWithDescription(SystemWeaver.Common.IswWorkflowStatus,SystemWeaver.Common.IswDescription)">
            <summary>
            Sets status and description in one operation.
            </summary>
            <param name="status">The status.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.MoveDownInIteration">
            <summary>
              Moves the issue down in the ordered list of issues belonging to an iteration. 
            </summary>
            <remarks>
              If the issue is already at the bottom position this method will silently return doing nothing.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.MoveUpInIteration">
            <summary>
              Moves the issue up in the ordered list of issues belonging to an iteration. 
            </summary>
            <remarks>
              If the issue is already at the top position the method will silently return doing nothing.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.GetObjRefs(System.String)">
            <summary>
              Returns all IssueObjRefs with specified RefType pointing to this Issue through the Issue property.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.GetObjRefs(SystemWeaver.Common.IswIssueRefType)">
            <summary>
              Returns all IssueObjRefs with specified RefType pointing to this Issue through the Issue property.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.GetAllObjRefs">
            <summary>
              Returns all IssueObjRefs of all RefTypes pointing to this Issue through the Issue property.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.AddObjRef(System.String,SystemWeaver.Common.IswObj)">
            <summary>
              Creates a new IssueObjRef of specified type, with this issue as Issue and supplied argument as Obj.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.AddObjRef(SystemWeaver.Common.IswIssueRefType,SystemWeaver.Common.IswObj)">
            <summary>
              Creates a new IssueObjRef of specified type, with this issue as Issue and supplied argument as Obj.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.SetObjRef(System.String,SystemWeaver.Common.IswObj)">
            <summary>
              Creates or modifies an IssueObjRef of specified type, pointing to this issue with supplied argument as Obj.
            </summary>
            <remarks>
              If no IssueObjRef of this type exists then one is created. 
              If an IssueObjRef already exists, then the current Obj on that IssueObjRef is replaced. 
              If the supplied Obj is nil or null then an existing issue-ref is removed.
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.IswIssue.SetObjRef(SystemWeaver.Common.IswIssueRefType,SystemWeaver.Common.IswObj)">
            <summary>
              Creates or modifies an IssueObjRef of specified type, pointing to this issue with supplied argument as Obj.
            </summary>
            <remarks>
              If no IssueObjRef of this type exists then one is created. 
              If an IssueObjRef already exists, then the current Obj on that IssueObjRef is replaced. 
              If the supplied Obj is nil or null then an existing issue-ref is removed.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.IterationNo">
            <summary>
            Specifies the position/priority of the issue if it belongs to an iteration.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.IssueId">
            <summary>
            Gets the issue id.
            </summary>
            <remarks>
            The issue id is a per database unique number representing the issue. These numbers are created in sequence during the lifetime of the database.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.CreatedBy">
            <summary>
            Returns the user who created the issue. Typically called, the reporter.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.CreationDate">
            <summary>
            Returns the date and time the issue was created.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.LastChangedBy">
            <summary>
            Returns which user was the last to do a change to the issue.
            </summary>
            <remarks>
            A change includes changing a property, an attribute or the description. Adding notes are not considered a change.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.LastChanged">
            <summary>
            Returns what date and time the issue was last changed.
            </summary>
            <remarks>
            A change includes changing a property, an attribute or the description. Adding notes are not considered a change.
            </remarks>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.AssignedTo">
            <summary>
            Gets and sets which user the issue is assigned to.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.Status">
            <summary>
            Gets and sets the status.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.swIssueType">
            <summary>
            Gets the issue type.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.Project">
            <summary>
            Gets the project to which this issue belongs.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssue.Iteration">
            <summary>
            Gets the iteration to which this issue belongs.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswIssues">
            <summary>
            List of issues.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssues.SortByIterationNo">
            <summary>
            Sorts the issues by their iterations.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssues.Copy">
            <summary>
            Returns a copy of the entire array.
            </summary>
            <returns>The new copy.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswIssues.Map(System.Action{SystemWeaver.Common.IswIssue})">
            <summary>
            Runs specified method on each issue in the list.
            </summary>
            <param name="action">The method to run.</param>
        </member>
        <member name="P:SystemWeaver.Common.IswIssues.Item(System.Int32)">
            <summary>
              Retrieves the issue at the given index.
            </summary>
            <param name="index">Zero-based index into the list of issues.</param>
            <returns>The issue at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswIssueObjRef">
            <summary>
            Interface representing the relationship between an issue and an obj.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueObjRef.Issue">
            <summary>
            The issue.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueObjRef.Obj">
            <summary>
            The obj.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueObjRef.RefType">
            <summary>
            Gets the type of relationship.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswIssueObjRefs">
            <summary>
            List of issue-obj-refs.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueObjRefs.GetRefsToObj(SystemWeaver.Common.IswObj)">
            <summary>
            Returns all issue-obj-refs in the list with obj as <see cref="P:SystemWeaver.Common.IswIssueObjRef.Obj"/>.
            </summary>
            <param name="obj">The obj to search for as Obj.</param>
            <returns>All issue-obj-refs in the list with obj as Obj.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueObjRefs.FindRefToObj(SystemWeaver.Common.IswObj)">
            <summary>
            Gets the first issue-obj-ref in the list with obj as <see cref="P:SystemWeaver.Common.IswIssueObjRef.Obj"/>, or null if no such issue-obj-ref exists.
            </summary>
            <param name="obj">The obj to search for as Obj.</param>
            <returns>The first issue-obj-ref in the list with obj as <see cref="P:SystemWeaver.Common.IswIssueObjRef.Obj"/>, or null if no such issue-obj-ref exists.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueObjRefs.GetIssues">
            <summary>
            Returns a list of all issues referenced from the issue-obj-refs through the Issue property.
            </summary>
            <returns>All issues referenced from the issue-obj-refs through the Issue property.</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswIssueObjRefs.GetObjs">
            <summary>
            Returns a list of all objs referenced from the issue-obj-refs through the Obj property.
            </summary>
            <returns>All objs referenced from the issue-obj-refs through the Obj property.</returns>
        </member>
        <member name="P:SystemWeaver.Common.IswIssueObjRefs.Item(System.Int32)">
            <summary>
              Retrieves the issue-obj-ref at the given index.
            </summary>
            <param name="index">Zero-based index into the list of issue-obj-refs.</param>
            <returns>The issue-obj-ref at the specified index.</returns>
        </member>
        <member name="T:SystemWeaver.Common.IswApplicationConfig">
            <summary>
              Interface for application configs.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswApplicationConfig.IsActive(System.Guid)">
            <summary>
            Returns if given feature is active or not
            </summary>
            <param name="guid">The guid of the config/feature</param>
            <returns>True if active</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswApplicationConfig.SetIsActive(System.Guid,System.Boolean)">
            <summary>
            Sets if given feature is active
            </summary>
            <param name="guid">The guid of the feature</param>
            <param name="value">True if active</param>
        </member>
        <member name="M:SystemWeaver.Common.IswApplicationConfig.ConfigXML(System.Guid)">
            <summary>
            Gets the xml representing the configuration of feature with given sid.
            </summary>
            <param name="guid">The guid of the feature</param>
            <returns>The xml as a string</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswApplicationConfig.SetConfigXML(System.Guid,System.String)">
            <summary>
            Sets the xml representing the configuration of feature with given sid.
            </summary>
            <param name="guid">>The guid of the feature</param>
            <param name="value">The xml as a string</param>
        </member>
        <member name="P:SystemWeaver.Common.IswApplicationConfig.GUID">
            <summary>
            GUID of the application
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.IswLists">
            <summary>
              IswLists is a factory that creates empty lists.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewAttributeList">
            <summary>
            Creates an empty IswAttributes object.
            </summary>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewAttributeTypeList(System.Boolean)">
            <summary>
            Creates an empty IswAttributeTypes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewEntityList(System.Boolean)">
            <summary>
            Creates an empty IswEntities object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewConfigItemList(System.Boolean)">
            <summary>
            Creates an empty IswConfigItems object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewDefaultAttributeList(System.Boolean)">
            <summary>
            Creates an empty IswDefaultAttributes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewDefaultPartAttributeList(System.Boolean)">
            <summary>
            Creates an empty IswDefaultPartAttributes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewFileRevisionList(System.Boolean)">
            <summary>
            Creates an empty IswFileRevisions object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewGroupList(System.Boolean)">
            <summary>
            Creates an empty IswGroups object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewIssueObjRefList(System.Boolean)">
            <summary>
            Creates an empty IswIssueObjRefs object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewIssueRefTypeList(System.Boolean)">
            <summary>
            Creates an empty IswIssueRefTypes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewIssueReportList(System.Boolean)">
            <summary>
            Creates an empty IswIssueReports object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewIssueList(System.Boolean)">
            <summary>
            Creates an empty IswIssues object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewIssueTypeList(System.Boolean)">
            <summary>
            Creates an empty IswIssueTypes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewItemACList">
            <summary>
            Creates an empty IswItemACs object.
            </summary>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewItemList(System.Boolean)">
            <summary>
            Creates an empty IswItems object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewItemTypeList(System.Boolean)">
            <summary>
            Creates an empty IswItemTypes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewIterationList(System.Boolean)">
            <summary>
            Creates an empty IswIterations object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewLibraryList(System.Boolean)">
            <summary>
            Creates an empty IswLibraries object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewLibraryACList">
            <summary>
            Creates an empty IswLibraryACs object.
            </summary>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewNodeList(System.Boolean)">
            <summary>
            Creates an empty IswNodes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewNoteList(System.Boolean)">
            <summary>
            Creates an empty IswNotes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewNoteTypeList">
            <summary>
            Creates an empty IswNoteTypes object.
            </summary>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewObjectList(System.Boolean)">
            <summary>
            Creates an empty IswObjects object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewObjList(System.Boolean)">
            <summary>
            Creates an empty IswObjs object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewPartGroupList">
            <summary>
            Creates an empty IswPartGroups object.
            </summary>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewPartList(System.Boolean)">
            <summary>
            Creates an empty IswParts object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewPartTypeList(System.Boolean)">
            <summary>
            Creates an empty IswPartTypes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewProjectACList">
            <summary>
            Creates an empty IswProjectACs object.
            </summary>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewProjectAttributeTypeList(System.Boolean)">
            <summary>
            Creates an empty IswProjectAttributeTypes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewProjectGroupList(System.Boolean)">
            <summary>
            Creates an empty IswProjectGroups object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewProjectList(System.Boolean)">
            <summary>
            Creates an empty IswProjects object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewRoleList">
            <summary>
            Creates an empty IswRoles object.
            </summary>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewTypeList(System.Boolean)">
            <summary>
            Creates an empty IswTypes object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewUserList(System.Boolean)">
            <summary>
            Creates an empty IswUsers object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewViewList(System.Boolean)">
            <summary>
            Creates an empty IswViews object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewWorkflowList(System.Boolean)">
            <summary>
            Creates an empty IswWorkflows object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewWorkflowStatusList(System.Boolean)">
            <summary>
            Creates an empty IswWorkflowStatuses object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="M:SystemWeaver.Common.IswLists.NewWorkflowTransitionList(System.Boolean)">
            <summary>
            Creates an empty IswWorkflowTransitions object.
            </summary>
            <param name="isSortedOnHandle">true if objects in the list should be sorted by handle</param>
            <returns>Empty list</returns>
        </member>
        <member name="T:SystemWeaver.Common.TswObjectList">
            <summary>
              [internal]
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.TswObjectList.FIsSortedOnHandle">
            <summary>
            [internal]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjectList.#ctor(System.Boolean)">
            <summary>
            [internal]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjectList.Sort(System.Collections.IComparer)">
            <summary>
            [internal]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjectList.SortedAddObject(SystemWeaver.Common.IswObject)">
            <summary>
            [internal]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjectList.SortedAddObjectUnique(SystemWeaver.Common.IswObject)">
            <summary>
            [internal]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjectList.SortedHasObject(System.Int64)">
            <summary>
            [internal]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjectList.SortedFindObject(System.Int64,System.Int32@)">
            <summary>
            [internal]
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswObjects">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswObjects"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswObjects list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswObject},System.Boolean)">
            <summary>
            Creates an instance of an IswObjects list as a copy of a C# enumerable.
            </summary>
            <param name="objects">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.Concat(SystemWeaver.Common.IswObjects)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.Concat(SystemWeaver.Common.IswObjects)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.ConcatUnique(SystemWeaver.Common.IswObjects)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.ConcatUnique(SystemWeaver.Common.IswObjects)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.RemoveObject(SystemWeaver.Common.IswObject)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.RemoveObject(SystemWeaver.Common.IswObject)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.RemoveObjectH(System.Int64)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.RemoveObjectH(System.Int64)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.FindObject(System.Int64)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.FindObject(System.Int64)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.IndexOfObject(SystemWeaver.Common.IswObject)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.IndexOfObject(SystemWeaver.Common.IswObject)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.IndexOfObjectH(System.Int64)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.IndexOfObjectH(System.Int64)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.HasObjectH(System.Int64)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.HasObjectH(System.Int64)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.Has(SystemWeaver.Common.IswObject)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.Has(SystemWeaver.Common.IswObject)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.HasWithName(System.String)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.HasWithName(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.FindWithName(System.String)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.FindWithName(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.AddUnique(SystemWeaver.Common.IswObject)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.AddUnique(SystemWeaver.Common.IswObject)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.Add(SystemWeaver.Common.IswObject)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.Add(SystemWeaver.Common.IswObject)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.RemoveList(SystemWeaver.Common.IswObjects)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.RemoveList(SystemWeaver.Common.IswObjects)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.ObjectCount(SystemWeaver.Common.IswObject)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.ObjectCount(SystemWeaver.Common.IswObject)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.HasSameContent(SystemWeaver.Common.IswObjects)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.HasSameContent(SystemWeaver.Common.IswObjects)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.SortByName">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.SortByName"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjects.SortByField(System.String)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjects.SortByField(System.String)"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswObjects.Names">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswObjects.Names"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswObjects.Handles">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswObjects.Handles"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswObjects.Handles2">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswObjects.Handles2"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswObjects.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswObjects.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswObjects.IsSortedOnHandle">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswObjects.IsSortedOnHandle"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswTypes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswTypes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswTypes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswTypes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswTypes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswType},System.Boolean)">
            <summary>
            Creates an instance of an IswTypes list as a copy of a C# enumerable.
            </summary>
            <param name="types">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswTypes.Map(System.Action{SystemWeaver.Common.IswType})">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswTypes.Map(System.Action{SystemWeaver.Common.IswType})"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswTypes.SortBySID">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswTypes.SortBySID"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswTypes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswTypes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswItemTypes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswItemTypes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItemTypes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswItemTypes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswItemTypes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswItemType},System.Boolean)">
            <summary>
            Creates an instance of an IswItemTypes list as a copy of a C# enumerable.
            </summary>
            <param name="itemTypes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswItemTypes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswItemTypes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswPartTypes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswPartTypes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswPartTypes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswPartTypes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswPartTypes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswPartType},System.Boolean)">
            <summary>
            Creates an instance of an IswPartTypes list as a copy of a C# enumerable.
            </summary>
            <param name="partTypes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswPartTypes.SortByNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswPartTypes.SortByNo"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswPartTypes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswPartTypes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswCategories">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswCategories"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswCategories.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswCategories list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswCategories.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswCategory},System.Boolean)">
            <summary>
            Creates an instance of an IswCategories list as a copy of a C# enumerable.
            </summary>
            <param name="categories">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswCategories.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswCategories.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswEntities">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswEntities"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswEntities.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswEntities list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswEntities.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswEntity},System.Boolean)">
            <summary>
            Creates an instance of an IswEntities list as a copy of a C# enumerable.
            </summary>
            <param name="entities">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswEntities.SortByDisplayName">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswEntities.SortByDisplayName"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswEntities.Users">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswEntities.Users"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswEntities.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswEntities.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswUsers">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswUsers"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswUsers.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswUsers list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswUsers.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswUser},System.Boolean)">
            <summary>
            Creates an instance of an IswUsers list as a copy of a C# enumerable.
            </summary>
            <param name="users">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswUsers.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswUsers.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswGroups">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswGroups"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswGroups.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswGroups list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswGroups.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswGroup},System.Boolean)">
            <summary>
            Creates an instance of an IswGroups list as a copy of a C# enumerable.
            </summary>
            <param name="groups">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswGroups.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswGroups.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswGroupMembers">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswGroupMembers"/>
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswGroupMembers.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswGroupMembers.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswDefaultAttributes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswDefaultAttributes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswDefaultAttributes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswDefaultAttributes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswDefaultAttributes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswDefaultAttribute},System.Boolean)">
            <summary>
            Creates an instance of an IswDefaultAttributes list as a copy of a C# enumerable.
            </summary>
            <param name="defaultAttributes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswDefaultAttributes.SortByNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswDefaultAttributes.SortByNo"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswDefaultAttributes.AttributeTypes">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswDefaultAttributes.AttributeTypes"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswDefaultAttributes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswDefaultAttributes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswDefaultPartAttributes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswDefaultPartAttributes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswDefaultPartAttributes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswDefaultPartAttributes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswDefaultPartAttributes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswDefaultPartAttribute},System.Boolean)">
            <summary>
            Creates an instance of an IswDefaultPartAttributes list as a copy of a C# enumerable.
            </summary>
            <param name="defaultPartAttributes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswDefaultPartAttributes.SortByNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswDefaultPartAttributes.SortByNo"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswDefaultPartAttributes.GetAttributeTypes(SystemWeaver.Common.IswObj)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswDefaultPartAttributes.GetAttributeTypes(SystemWeaver.Common.IswObj)"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswDefaultPartAttributes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswDefaultPartAttributes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswAttributeTypes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswAttributeTypes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributeTypes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswAttributeTypes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributeTypes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswAttributeType},System.Boolean)">
            <summary>
            Creates an instance of an IswAttributeTypes list as a copy of a C# enumerable.
            </summary>
            <param name="attributeTypes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributeTypes.Copy">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswAttributeTypes.Copy"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributeTypes.Map(System.Action{SystemWeaver.Common.IswAttributeType})">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswAttributeTypes.Map(System.Action{SystemWeaver.Common.IswAttributeType})"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributeTypes.FindWithSID(System.String)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswAttributeTypes.FindWithSID(System.String)"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswAttributeTypes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswAttributeTypes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswNotes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswNotes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswNotes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswNotes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswNotes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswNote},System.Boolean)">
            <summary>
            Creates an instance of an IswNotes list as a copy of a C# enumerable.
            </summary>
            <param name="notes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswNotes.SortByCreationDate">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswNotes.SortByCreationDate"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswNotes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswNotes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswFileRevisions">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswFileRevisions"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswFileRevisions.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswFileRevisions list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswFileRevisions.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswFileRevision},System.Boolean)">
            <summary>
            Creates an instance of an IswFileRevisions list as a copy of a C# enumerable.
            </summary>
            <param name="fileRevisions">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswFileRevisions.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswFileRevisions.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswIssueObjRefs">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswIssueObjRefs"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueObjRefs.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswIssueObjRefs list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueObjRefs.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswIssueObjRef},System.Boolean)">
            <summary>
            Creates an instance of an IswIssueObjRefs list as a copy of a C# enumerable.
            </summary>
            <param name="objRefs">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueObjRefs.GetRefsToObj(SystemWeaver.Common.IswObj)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIssueObjRefs.GetRefsToObj(SystemWeaver.Common.IswObj)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueObjRefs.FindRefToObj(SystemWeaver.Common.IswObj)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIssueObjRefs.FindRefToObj(SystemWeaver.Common.IswObj)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueObjRefs.GetIssues">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIssueObjRefs.GetIssues"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueObjRefs.GetObjs">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIssueObjRefs.GetObjs"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswIssueObjRefs.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswIssueObjRefs.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswAttributes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswAttributes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributes.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributes.#ctor">
            <summary>
            Creates an instance of an IswAttributes list.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswAttribute})">
            <summary>
            Creates an instance of an IswAttributes list as a copy of a C# enumerable.
            </summary>
            <param name="attributes">The C# enumerable</param>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributes.Map(System.Action{SystemWeaver.Common.IswAttribute})">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswAttributes.Map(System.Action{SystemWeaver.Common.IswAttribute})"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributes.AddUnique(SystemWeaver.Common.IswAttribute)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswAttributes.AddUnique(SystemWeaver.Common.IswAttribute)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributes.Concat(SystemWeaver.Common.IswAttributes)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswAttributes.Concat(SystemWeaver.Common.IswAttributes)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributes.Has(SystemWeaver.Common.IswAttribute)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswAttributes.Has(SystemWeaver.Common.IswAttribute)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswAttributes.RemoveAttributeOfType(SystemWeaver.Common.IswAttributeType)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswAttributes.RemoveAttributeOfType(SystemWeaver.Common.IswAttributeType)"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswAttributes.AttributeTypes">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswAttributes.AttributeTypes"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswAttributes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswAttributes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswPartGroups">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswPartGroups"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswPartGroups.AddPart(SystemWeaver.Common.IswPart)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswPartGroups.AddPart(SystemWeaver.Common.IswPart)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswPartGroups.FindPartGroupOfType(SystemWeaver.Common.IswPartType)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswPartGroups.FindPartGroupOfType(SystemWeaver.Common.IswPartType)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswPartGroups.SortByPartTypeNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswPartGroups.SortByPartTypeNo"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswPartGroups.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswPartGroups.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswObjs">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswObjs"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjs.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswAttributes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswObjs.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswObj},System.Boolean)">
            <summary>
            Creates an instance of an IswObjs list as a copy of a C# enumerable.
            </summary>
            <param name="objs">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswObjs.AttributeValues(System.String)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjs.AttributeValues(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswObjs.AttributeValuesAsString(System.String)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswObjs.AttributeValuesAsString(System.String)"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswObjs.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswObjs.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswParts">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswParts"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswParts list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswPart},System.Boolean)">
            <summary>
            Creates an instance of an IswParts list as a copy of a C# enumerable.
            </summary>
            <param name="parts">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.SortByPartNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.SortByPartNo"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.SortByAncestorHandle">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.SortByAncestorHandle"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.HasDefObj(SystemWeaver.Common.IswObj)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.HasDefObj(SystemWeaver.Common.IswObj)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.HasRefObj(SystemWeaver.Common.IswObj)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.HasRefObj(SystemWeaver.Common.IswObj)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.FindDefObjPart(SystemWeaver.Common.IswObj)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.FindDefObjPart(SystemWeaver.Common.IswObj)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.FindDefObjItemPart(SystemWeaver.Common.IswItem,System.Boolean)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.FindDefObjItemPart(SystemWeaver.Common.IswItem,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.FindOwnerPart(SystemWeaver.Common.IswItem)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.FindOwnerPart(SystemWeaver.Common.IswItem)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.GetDefObjParts(SystemWeaver.Common.IswObj)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.GetDefObjParts(SystemWeaver.Common.IswObj)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.GetRefObjParts(SystemWeaver.Common.IswObj)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.GetRefObjParts(SystemWeaver.Common.IswObj)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.DefObjItems">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.DefObjItems"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.RefObjItems">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.RefObjItems"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.OwnerItems">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.OwnerItems"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.DefObjItemsUnique">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.DefObjItemsUnique"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.RefObjItemsUnique">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.RefObjItemsUnique"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.DefObjItems(System.String)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.DefObjItems(System.String)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.GetDefObjItemParts(SystemWeaver.Common.IswItem,System.Boolean)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.GetDefObjItemParts(SystemWeaver.Common.IswItem,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.Map(System.Action{SystemWeaver.Common.IswPart})">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.Map(System.Action{SystemWeaver.Common.IswPart})"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.FindUniqueDefObjPart(SystemWeaver.Common.IswObj)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.FindUniqueDefObjPart(SystemWeaver.Common.IswObj)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.DefObjs">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.DefObjs"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.RefObjs">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.RefObjs"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswParts.FindPartWithAncestorHandle(System.Int64)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswParts.FindPartWithAncestorHandle(System.Int64)"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswParts.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswParts.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswItems">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswItems"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswItems list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswItem},System.Boolean)">
            <summary>
            Creates an instance of an IswItems list as a copy of a C# enumerable.
            </summary>
            <param name="items">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.Map(System.Action{SystemWeaver.Common.IswItem})">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswItems.Map(System.Action{SystemWeaver.Common.IswItem})"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.ItemsWithSameAncestor(SystemWeaver.Common.IswItem)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswItems.ItemsWithSameAncestor(SystemWeaver.Common.IswItem)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.HasItemWithAncestorHandle(System.Int64)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswItems.HasItemWithAncestorHandle(System.Int64)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.RemoveListV(SystemWeaver.Common.IswItems)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswItems.RemoveListV(SystemWeaver.Common.IswItems)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.RemoveItemVAll(SystemWeaver.Common.IswItem)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswItems.RemoveItemVAll(SystemWeaver.Common.IswItem)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.SortByCreationDate">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswItems.SortByCreationDate"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.SortByLastChanged">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswItems.SortByLastChanged"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.Copy">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswItems.Copy"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswItems.AllOfSID(System.String)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswItems.AllOfSID(System.String)"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswItems.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswItems.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswItemACs">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswItemACs"/>
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswItemACs.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswItemACs.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswLibraries">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswLibraries"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswLibraries.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswItems list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswLibraries.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswLibrary},System.Boolean)">
            <summary>
            Creates an instance of an IswLibraries list as a copy of a C# enumerable.
            </summary>
            <param name="libraries">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswLibraries.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswLibraries.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswLibraryACs">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswLibraryACs"/>
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswLibraryACs.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswLibraryACs.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswNodes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswNodes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswNodes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswNodes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswNodes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswNode},System.Boolean)">
            <summary>
            Creates an instance of an IswNodes list as a copy of a C# enumerable.
            </summary>
            <param name="nodes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswNodes.FindItemNode(SystemWeaver.Common.IswItem,System.Boolean)">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswNodes.FindItemNode(SystemWeaver.Common.IswItem,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswNodes.SortByPartNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswNodes.SortByPartNo"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswNodes.Map(System.Action{SystemWeaver.Common.IswNode})">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswNodes.Map(System.Action{SystemWeaver.Common.IswNode})"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswNodes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswNodes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswConfigItems">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswConfigItems"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswConfigItems.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswConfigItems list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswConfigItems.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswConfigItem},System.Boolean)">
            <summary>
            Creates an instance of an IswConfigItems list as a copy of a C# enumerable.
            </summary>
            <param name="configItems">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswConfigItems.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswConfigItems.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswNoteTypes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswNoteTypes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswNoteTypes.Copy">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswNoteTypes.Copy"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswNoteTypes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswNoteTypes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswProjects">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswProjects"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswProjects.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswProjects list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswProjects.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswProject},System.Boolean)">
            <summary>
            Creates an instance of an IswProjects list as a copy of a C# enumerable.
            </summary>
            <param name="projects">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswProjects.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswProjects.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswProjectACs">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswProjectACs"/>
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswProjectACs.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswProjectACs.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswProjectGroups">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswProjectGroups"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswProjectGroups.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswProjectGroups list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswProjectGroups.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswProjectGroup},System.Boolean)">
            <summary>
            Creates an instance of an IswProjectGroups list as a copy of a C# enumerable.
            </summary>
            <param name="projectGroups">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswProjectGroups.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswProjectGroups.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswIterations">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswIterations"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIterations.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswIterations list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIterations.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswIteration},System.Boolean)">
            <summary>
            Creates an instance of an IswIterations list as a copy of a C# enumerable.
            </summary>
            <param name="iterations">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIterations.GetActive">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIterations.GetActive"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIterations.SortByNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIterations.SortByNo"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswIterations.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswIterations.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswIssues">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswIssues"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssues.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswIssues list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIssues.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswIssue},System.Boolean)">
            <summary>
            Creates an instance of an IswIssues list as a copy of a C# enumerable.
            </summary>
            <param name="issues">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIssues.SortByIterationNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIssues.SortByIterationNo"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssues.Copy">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIssues.Copy"/>.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssues.Map(System.Action{SystemWeaver.Common.IswIssue})">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIssues.Map(System.Action{SystemWeaver.Common.IswIssue})"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswIssues.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswIssues.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswViews">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswViews"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswViews.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswViews list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswViews.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswView},System.Boolean)">
            <summary>
            Creates an instance of an IswViews list as a copy of a C# enumerable.
            </summary>
            <param name="views">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswViews.SortByNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswViews.SortByNo"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswViews.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswViews.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswIssueReports">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswIssueReports"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueReports.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswIssueReports list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueReports.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswIssueReport},System.Boolean)">
            <summary>
            Creates an instance of an IswIssueReports list as a copy of a C# enumerable.
            </summary>
            <param name="issueReports">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswIssueReports.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswIssueReports.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswWorkflows">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswWorkflows"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswWorkflows.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswWorkflows list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswWorkflows.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswWorkflow},System.Boolean)">
            <summary>
            Creates an instance of an IswWorkflows list as a copy of a C# enumerable.
            </summary>
            <param name="workflows">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswWorkflows.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswWorkflows.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswProjectAttributeTypes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswProjectAttributeTypes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswProjectAttributeTypes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswProjectAttributeTypes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswProjectAttributeTypes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswProjectAttributeType},System.Boolean)">
            <summary>
            Creates an instance of an IswProjectAttributeTypes list as a copy of a C# enumerable.
            </summary>
            <param name="projectAttributeTypes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswProjectAttributeTypes.SortByNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswProjectAttributeTypes.SortByNo"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswProjectAttributeTypes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswProjectAttributeTypes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswIssueTypes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswIssueTypes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueTypes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswIssueTypes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueTypes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswIssueType},System.Boolean)">
            <summary>
            Creates an instance of an IswIssueTypes list as a copy of a C# enumerable.
            </summary>
            <param name="issueTypes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="P:SystemWeaver.Common.TswIssueTypes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswIssueTypes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswIssueRefTypes">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswIssueRefTypes"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueRefTypes.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswIssueRefTypes list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueRefTypes.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswIssueRefType},System.Boolean)">
            <summary>
            Creates an instance of an IswIssueRefTypes list as a copy of a C# enumerable.
            </summary>
            <param name="issueRefTypes">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswIssueRefTypes.SortByNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswIssueRefTypes.SortByNo"/>.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswIssueRefTypes.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswIssueRefTypes.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswWorkflowTransitions">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswWorkflowTransitions"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswWorkflowTransitions.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswWorkflowTransitions list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswWorkflowTransitions.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswWorkflowTransition},System.Boolean)">
            <summary>
            Creates an instance of an IswWorkflowTransitions list as a copy of a C# enumerable.
            </summary>
            <param name="workflowTransitions">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswWorkflowTransitions.SortByNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswWorkflowTransitions.SortByNo"/>
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswWorkflowTransitions.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswWorkflowTransitions.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.TswWorkflowStatuses">
            <summary>
            Class implementing <see cref="T:SystemWeaver.Common.IswWorkflowStatuses"/>
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.TswWorkflowStatuses.#ctor(System.Boolean)">
            <summary>
            Creates an instance of an IswWorkflowStatuses list.
            </summary>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswWorkflowStatuses.#ctor(System.Collections.Generic.IEnumerable{SystemWeaver.Common.IswWorkflowStatus},System.Boolean)">
            <summary>
            Creates an instance of an IswWorkflowStatuses list as a copy of a C# enumerable.
            </summary>
            <param name="workflowStatuses">The C# enumerable</param>
            <param name="isSortedOnHandle">Specify true to have the list always be sorted on object handle.</param>
        </member>
        <member name="M:SystemWeaver.Common.TswWorkflowStatuses.SortByNo">
            <summary>
            Implements <see cref="M:SystemWeaver.Common.IswWorkflowStatuses.SortByNo"/>
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.TswWorkflowStatuses.Item(System.Int32)">
            <summary>
            Implements <see cref="P:SystemWeaver.Common.IswWorkflowStatuses.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWObjectRefTable">
            <summary>
            This is the class responsible for wrapping the rvf in the descriptions. It adds a translation table at the beginning used 
            to map internal sequence numbers (internal to the data wrapped) to handles. 
            These handles are then automatically updated by the server when a new version is created. References to parts in the old item
            are replaced by references to parts in the new item.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWObjectRefTable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWObjectRefTable.Clear">
            <summary>
            Clears the table.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWObjectRefTable.SaveToString(System.Byte[])">
            <summary>
            Gets the byte array consisting of the managed translation table together with the data it is suppposed to wrap.
            </summary>
            <param name="data">The data to wrap.</param>
            <returns>The byte array and the data in on byte array.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWObjectRefTable.LoadFromString(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a saved transalation table, and returns the wrapped data.
            </summary>
            <param name="AString">The input</param>
            <param name="data">The wrapped data</param>
        </member>
        <member name="M:SystemWeaver.Common.SWObjectRefTable.NewRefId(System.Int64)">
            <summary>
            Adds a handle to the translation table returns a new id used to retrieve the handle.
            </summary>
            <param name="AObjectHandle">The SystemWeaver handle to add</param>
            <returns>The id representing the handle.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWObjectRefTable.HasHandle(System.Int64)">
            <summary>
            Returns if a given handle exists in the table.
            </summary>
            <param name="AHandle">The handle to search for</param>
            <returns>True if the handle exists in the table</returns>
        </member>
        <member name="P:SystemWeaver.Common.SWObjectRefTable.HandleCount">
            <summary>
            Gets the number of handles in the translation table.
            </summary>
        </member>
        <member name="P:SystemWeaver.Common.SWObjectRefTable.Item(System.Int32)">
            <summary>
            Gets the handle associated by the given id.
            </summary>
            <param name="ARefId">The number to translate</param>
            <returns>The handle corresponding to supplied id, or a nil handle if id not found.</returns>
        </member>
        <member name="T:SystemWeaver.Common.TswDescription">
            <summary>
            This class impleme
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWDescription">
            <summary>
            Utility class for dealing with SystemWeaver descriptions.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWDescription.MakeDescription(System.Byte[])">
            <summary>
            Creates a SystemWeaver Description object from its raw data representation.
            </summary>
            <param name="data">The complete data representation of a SystemWeaver description object</param>
            <returns>The description object</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWDescription.ZTextToDescription(System.Byte[])">
            <summary>
            Creates a SystemWeaver description object by wrapping a description text(compressed rvf) with an empty object reference table.
            </summary>
            <param name="AZText">The description text as compressed rvf.</param>
            <returns>The description object</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWDescription.PlainTextToDescription(System.String)">
            <summary>
            Creates a SystemWeaver description object from plain text.
            </summary>
            <param name="plainText">The description text</param>
            <returns>The description object</returns>
        </member>
        <member name="T:SystemWeaver.Common.SWRange">
            <summary>
              Utility class containing functions for working with the attribute-type range property.
            </summary>
            <remarks>
            	<para>A SystemWeaver range is currently represented as a zlib compressed xml.</para>
            	<para>This representation may be changed in the future to allow for extended functionality, so please use these help-functions instead of parsing the xml on your
            own.</para>
            	<para>For attributes of type enumeration the internal representation is:</para>
            	<code>
            &lt;Enumeration&gt;
              &lt;Enum&gt;a&lt;/Enum&gt;
              &lt;Enum&gt;b&lt;/Enum&gt;
              &lt;Enum color="16777215"&gt;cd&lt;/Enum&gt;
            &lt;/Enumeration&gt;
            
            </code>
            	<br/>
            	<para>For attributes of type string you can put a regular expression constraint represented by the xml:</para>
            	<code>
            &lt;RegExp&gt;gr(a|e)y&lt;/RegExp&gt;
                </code>
            </remarks>
        </member>
        <member name="M:SystemWeaver.Common.SWRange.RangeArrayToRange(System.String)">
            <summary>
            Converts a string with ;-separated values to a SystemWeaver range.
            </summary>
            <param name="ARangeArray">A string with ;-separated string values</param>
            <returns>The SystemWeaver range</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWRange.GetRangeArray(System.Byte[])">
            <summary>
            Converts a SystemWeaver range to a list of strings.
            </summary>
            <param name="ARange">The SystemWeaver range</param>
            <returns>The list of strings</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWRange.RegExpToRange(System.String)">
            <summary>
            Converts a regular expression to a SystemWeaver range.
            </summary>
            <param name="ARegExp">A regular expression string</param>
            <returns>The SystemWeaver range</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWRange.RangeToRegExp(System.Byte[])">
            <summary>
            Converts a SystemWeaver range to a regular expression string, returning empty string if the range does not represent a regular expression.  
            </summary>
            <param name="ARange">The SystemWeaver range.</param>
            <returns>The regular expression.</returns>
        </member>
        <member name="T:SystemWeaver.Common.Internal.TCall">
            <summary>
            [internal]
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWUtility">
            <summary>
              General utility class containing assorted functions.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWUtility.PlainTextToRvfz(System.String)">
            <summary>
            Returns text in compressed RichView format (used by rvf attributes).
            </summary>
            <param name="text">Plain text</param>
            <exception cref="T:System.ArgumentNullException">If text is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the text (in compressed RichView format) exceeds the maximum size.</exception>
            <returns>Text in compressed RichView format.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWUtility.RvfzToPlainText(System.Byte[])">
            <summary>
            Returns plain text from compressed RichView data.
            </summary>
            <param name="rvfz">Compressed RichView data</param>
            <exception cref="T:System.ArgumentNullException">If rvfz is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the plain text string exceeds the maximum size.</exception>
            <returns>Plain text</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWUtility.RvfzToRtf(System.Byte[])">
            <summary>
            Returns a RTF string representation of the compressed RichView data
            </summary>
            <param name="rvfz">Compressed RichView data</param>
            <exception cref="T:System.ArgumentNullException">If rvfz is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the RTF string exceeds the maximum size.</exception>
            <returns>RTF string</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWUtility.RtfToRvfz(System.String)">
            <summary>
            Returns a compressed RVF representation of the RTF.
            </summary>
            <param name="rtf">RTF string</param>
            <exception cref="T:System.ArgumentNullException">If rtf is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the compressed RVF data exceeds the maximum size.</exception>
            <returns>Compressed RVF data.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWUtility.GetAllReferencedItems(SystemWeaver.Common.IswItem,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
              Returns all references items found recursively by following all design decisions.
            </summary>
            <param name="AItem">The starting item</param>
            <param name="AIncludeAllPreviousVersions">Set true to also include all previous versions of all referenced items.</param>
            <param name="AIncludeLaterVersions">Set true to also include all later versions of all referenced items.</param>
            <param name="AIncludeMainItem">Set false to exclude the starting item from the result.</param>
            <param name="AExcludedParts">List of sids of part-types to exclude from the recursive traversing</param>
            <returns>The list of referenced items.</returns>
        </member>
        <member name="T:SystemWeaver.Common.SWAccessCodes">
            <summary>
              Represents the possible access codes currently available in SystemWeaver.
            </summary>
            <seealso cref="M:SystemWeaver.Common.SWAccessMode"></seealso>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessCodes.Read">
            <summary>
            Read permissions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessCodes.Write">
            <summary>
            Write permissions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessCodes.ChangeAccess">
            <summary>
            Permissions to change the security permissions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessCodes.LibraryItemsWrite">
            <summary>
            Permissions to write to items in library under consideration
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessCodes.LibraryItemsChangeAccess">
            <summary>
            Permissions to change security permissions to items in library under consideration
            </summary>
        </member>
        <member name="T:SystemWeaver.Common.SWAccessMode">
            <summary>Represents a permission setting for a SystemWeaver object, as a set of access-codes.</summary>
            <seealso cref="M:SystemWeaver.Common.SWAccessCodes"></seealso>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessMode.None">
            <summary>
            Represents no permissions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessMode.Read">
            <summary>
            Represents only read permissions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessMode.Write">
            <summary>
            Represents only write permissions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessMode.ReadWrite">
            <summary>
            Represents read and write permissions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessMode.ChangeAccess">
            <summary>
            Represents only change security permissions.
            </summary>
        </member>
        <member name="F:SystemWeaver.Common.SWAccessMode.ReadWriteChangeAccess">
            <summary>
            Represents read, write and change security permissions.
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.#ctor(SystemWeaver.Common.SWAccessCodes)">
            <summary>
            [internal, do not use]
            </summary>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.Contains(SystemWeaver.Common.SWAccessCodes)">
            <summary>
            Checks if an access-mode includes a specific access code.
            </summary>
            <param name="code">The access code</param>
            <returns>True if the access-mode contains the specific access code.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.op_Addition(SystemWeaver.Common.SWAccessMode,SystemWeaver.Common.SWAccessMode)">
            <summary>
            Merges two access modes. Bitwise or.
            </summary>
            <param name="mode1">A mode</param>
            <param name="mode2">Another mode</param>
            <returns>The merged mode</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.op_Addition(SystemWeaver.Common.SWAccessMode,SystemWeaver.Common.SWAccessCodes)">
            <summary>
            Merges access codes into an access mode. Bitwise or.
            </summary>
            <param name="mode">A mode</param>
            <param name="code">Access codes</param>
            <returns>The merged mode</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.op_Subtraction(SystemWeaver.Common.SWAccessMode,SystemWeaver.Common.SWAccessCodes)">
            <summary>
            Removes specified access codes from an access mode.
            </summary>
            <param name="mode">A mode.</param>
            <param name="code">Codes to be removed.</param>
            <returns>The mode with specified codes removed.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.op_Inequality(SystemWeaver.Common.SWAccessMode,SystemWeaver.Common.SWAccessMode)">
            <summary>
            Not equal.
            </summary>
            <param name="mode1">An access mode.</param>
            <param name="mode2">Another access mode.</param>
            <returns>False if any mode contains a code the other does not.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.op_Equality(SystemWeaver.Common.SWAccessMode,SystemWeaver.Common.SWAccessMode)">
            <summary>
            Equal.
            </summary>
            <param name="mode1">An access mode</param>
            <param name="mode2">Another access mode</param>
            <returns>True if both access modes contains the exact same access codes.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.Equals(System.Object)">
            <summary>
            Equals.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.GetHashCode">
            <summary>
            The hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.AsInt">
            <summary>
            Returns the integer representation of an access mode.
            </summary>
            <returns>The integer representing an access mode.</returns>
        </member>
        <member name="M:SystemWeaver.Common.SWAccessMode.AccessModeFromInt(System.Int32)">
            <summary>
            Returns an instance of SWAccessMode from its integer representation.
            </summary>
            <param name="AMode">An integer representing an access mode.</param>
            <returns>The corresponding access mode.</returns>
        </member>
        <member name="P:SystemWeaver.Common.SWAccessMode.AccessCodes">
            <summary>
            [internal, do not use]
            </summary>
        </member>
    </members>
</doc>
